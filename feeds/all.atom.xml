<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mitigating Failure</title><link href="https://mitigatingfailure.com/" rel="alternate"></link><link href="https://mitigatingfailure.com/feeds/all.atom.xml" rel="self"></link><id>https://mitigatingfailure.com/</id><updated>2025-03-11T00:00:00-04:00</updated><subtitle>Mitigating Failure</subtitle><entry><title>Leaning with AI</title><link href="https://mitigatingfailure.com/My%20experiences%20learning%20with%20AI.html" rel="alternate"></link><published>2024-11-10T00:00:00-05:00</published><updated>2025-03-11T00:00:00-04:00</updated><author><name>Niraj Amalkanti</name></author><id>tag:mitigatingfailure.com,2024-11-10:/My experiences learning with AI.html</id><summary type="html">&lt;p&gt;TL;DR: AI is at its best when it helps you think better, not when it tries to think for you.&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#Story-So-Far"&gt; Story So Far - Learning with ChatGPT &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/5/2025"&gt; 3/5/2025 - Claude vs ChatGPT vs Gemini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3-6-2025"&gt;3/6/2025 - Ikon vs Epic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3-7-2025"&gt;3/7/2025 - Memories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3-28-2025"&gt;3/28/2025 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR: AI is at its best when it helps you think better, not when it tries to think for you.&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#Story-So-Far"&gt; Story So Far - Learning with ChatGPT &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/5/2025"&gt; 3/5/2025 - Claude vs ChatGPT vs Gemini&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3-6-2025"&gt;3/6/2025 - Ikon vs Epic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3-7-2025"&gt;3/7/2025 - Memories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3-28-2025"&gt;3/28/2025 - Specialized Interfaces Matter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4-10-2025"&gt;4/10/2025 - Canvas vs Artifacts: The Plot Thickens&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4-11-2025"&gt;4/11/2025 - Slip Coding: Reclaiming Vibe Coding For Productivity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;I've had a complicated relationship with AI tools. This post documents my journey from skepticism to finding genuine value in AI assistants—not as code generators, but as learning companions and thought organizers. I'll share my evolving understanding of how to use these tools effectively and compare different platforms to help others find approaches that might be useful.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Document how AI assistants can amplify learning when used intelligently&lt;/li&gt;
&lt;li&gt;Demostrate the organizational capabilities of LLMs&lt;/li&gt;
&lt;li&gt;Share strategies for effective AI collaboration that go beyond basic prompting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="Story-So-Far"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Story So Far - Learning with ChatGPT&lt;/h1&gt;
&lt;p&gt;My initial experiences with generative AI were deeply disappointing. I work in Edge AI and often have to build specialized models that work on compute constrained enviroments. In this space, I found the code generation capabilities fell far short of the hype. Prototype code in Python was okay, but anything in C++ was barely usable(if it even compiled). I needed heavy prompt engineering to get some of this to work and it was comparable in effort to writing it out in the first place.&lt;/p&gt;
&lt;p&gt;The turning point came in November 2024. I had a realization: what if I stopped expecting AI to solve my problems and instead used it as a learning tool?&lt;/p&gt;
&lt;p&gt;I began using ChatGPT not to generate solutions, but to:
- Take notes during my learning process
- Organize my thoughts and exploration
- "Pair program" as I wrote my own code
- Distill software engineering expertise into prompts that helped me write cleaner code&lt;/p&gt;
&lt;p&gt;But this wasn't just limited to work and coding. I soon found that ChatGPT was great for learning about... well almost anything. Being able to take notes and looking up items in a single chat keeps things organized. I could have different lines of thought or exploration for whatever I wanted. Normally, taking notes seperately and keeping them organized is a lot of effort/upkeep. But with ChatGPT, it became trivial. And if I wanted to revisit the thread after a break(because I'm busy with other things), ChatGPT could summarize this and let me jump back in.&lt;/p&gt;
&lt;p&gt;Now, if I wanted to study something, plan a vacation, or learn anything, my first response is to create a ChatGPT chat. I can immediately learn and get some context. And if it's relevant, revisit/reorganize the chat later. If not, just delete it and move on.&lt;/p&gt;
&lt;p&gt;Of course, hallucinations are always a threat. But in today's era of fake news, I have to be vigilant all the time anyways as bad info is everywhere and can be hard to track down. And even if it hallucinates, ChatGPT can often correct itself on direct cross-examination. And this is a lot easier than constantly searching and cross-checking everything myself.&lt;/p&gt;
&lt;p&gt;The ability to maintain threads and have ChatGPT function as an intelligent "notetaker" proved incredibly valuable—even for topics it likely knew nothing about. I could feed it my own knowledge and have it help organize information and potentially illuminate patterns I might have missed. This was a key insight, even if ChatGPT didn't know about a topic; it could still help me learn, by diligently taking notes and finding patterns. In this case, it helped me analyze/organize my own information instead of providing it to me.&lt;/p&gt;
&lt;p&gt;This shift in approach changed everything. By leveraging my own intelligence and creativity, AI became an incredibly powerful force multiplier for learning and productivity.&lt;/p&gt;
&lt;p&gt;I eventually purchased a ChatGPT Pro subscription specifically for the "Projects" feature, which let me better organize conversations by topic. This further improved its organizational ability. I could create a ChatGPT project for my personal projects and keep several different threads within the project with a shared context. Or if I had a ton of questions about science, I could create a "science" project and let ChatGPT keep all my science question threads in a single project.&lt;/p&gt;
&lt;p&gt;What I realized was that most people use AI ineffectively— throwing problems at it and expecting perfect solutions. No wonder it never resonated with me before. The real power came from collaboration, using AI to enhance my own thinking rather than replace it.&lt;/p&gt;
&lt;p&gt;Of course, now that I realized the power of this new tool, I had to figure out which platform was best.&lt;/p&gt;
&lt;p&gt;&lt;a name="3-5-2025"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/5/2025 - Claude vs ChatGPT vs Gemini&lt;/h1&gt;
&lt;p&gt;I evaluated the three major AI platforms specifically for my personal use cases. While my journey started with ChatGPT, I wanted to make sure I wasn't missing out on potential benefits from competitors.&lt;/p&gt;
&lt;h2&gt;Platform Evaluation&lt;/h2&gt;
&lt;p&gt;My first priority was chat organization — the ability to keep my learning projects separate and structured. This quickly became a decisive factor:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ChatGPT:&lt;/strong&gt;
- Strong project organization with the ability to create and name different projects
- Clean interface for managing conversation history
- Easy to move convos in and out of projects&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Claude:&lt;/strong&gt;
- Does have project-level organization 
- Does not remove project convos from main convo list
- Not easy to move convos into projects after they've been created&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gemini:&lt;/strong&gt;
- Lacks any project support&lt;/p&gt;
&lt;p&gt;This initial assessment immediately led me to eliminate Gemini from consideration. Without proper project organization, it simply wouldn't meet my needs for structured learning and note-taking.&lt;/p&gt;
&lt;p&gt;Between ChatGPT and Claude, the differences weren't immediately obvious. Both offered solid organizational features, though ChatGPT felt a little better. However, I've heard that Claude's models are better than OpenAIs(though I realize this is very subjective) so I wanted to compare them directly.&lt;/p&gt;
&lt;p&gt;One observation I found surprising: none of the AI assistants themselves were aware of their own features. When asked about their project organization capabilities, they all provided generic responses rather than specific information about their implementation. Claude claimed it didn't have projects, though online resources implied otherwise. I had to purchase a Claude Pro sub to confirm that it did. &lt;/p&gt;
&lt;p&gt;&lt;a name="3-6-2025"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/6/2025 - Ikon vs Epic&lt;/h1&gt;
&lt;p&gt;I utilized both ChatGPT-4 and Claude 3.5 to evaluate ski pass options, specifically comparing the Ikon and Epic passes for the upcoming season. This served as a practical test case to assess how these tools handle detailed, research-oriented queries.&lt;/p&gt;
&lt;p&gt;However, the results were inconclusive, as both models provided very similar answers. While ChatGPT seemed slightly more tailored to my needs, this is likely because I have used it more extensively. Further evaluation will be necessary.&lt;/p&gt;
&lt;p&gt;&lt;a name="3-7-2025"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/7/2025 - Memory is the Key&lt;/h1&gt;
&lt;p&gt;Now I've finally found the killer feature I'm looking for. I assumed all platforms have it but it's just ChatGPT. &lt;/p&gt;
&lt;p&gt;ChatGPT has an explicit "memory" feature that allows it to recall information across separate chat sessions. This means it can reference projects, preferences, and past work without needing to review, creating a more continuous learning experience. Over time, its memory seems to improve as more interactions occur and the platform customizes itself to me.&lt;/p&gt;
&lt;p&gt;Claude only remembers context within a single conversation, so each new chat means starting over. You can encode instructions for projects, and Claude can retrieve them, but it’s nowhere near ChatGPT’s capabilities. Anthropic values this for privacy, which I get, but I prefer ChatGPT remembering what I’ve told it—it makes my experience better. &lt;/p&gt;
&lt;p&gt;Interestingly, Gemini does not do this. It mentions that Google has faced accusations of data privacy violations, and attempting to use a feature like this might be perceived as overly aggressive. I found this to be a very self-aware perspective. In theory, Google should have the most information about me, but if Gemini cannot leverage that, it becomes irrelevant.&lt;/p&gt;
&lt;p&gt;Based on this observation, I plan on continuing using ChatGPT pro. I will keep the other platforms in mind to see what other advantages they confer.&lt;/p&gt;
&lt;p&gt;&lt;a name="3-28-2025"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/28/2025 - Specialized Interfaces Matter&lt;/h1&gt;
&lt;p&gt;I've been testing Claude for blog writing, and its dual-pane editing interface (artifacts) is a game-changer for working with markdown. Being able to see both the raw markdown and rendered output simultaneously makes the writing process much more fluid. I can then use natural language to more effectively brainstorm and generate something usable. &lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/claude_dual_pane.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Claude's Artifact Interface&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is especially powerful on mobile, where I can shrink the artifact and swap between the artifact the chat easily. This makes it easy to develop from my phone on the go.&lt;/p&gt;
&lt;p&gt;What's particularly interesting is that this valuable feature remains available on Claude's free tier (at least for now). &lt;/p&gt;
&lt;p&gt;When editing code neovim, I use Github Copilot with CodeCompanion to get a similar in-editor experience(I use this for coding but could see it working for blog writing too), but being able to brainstorm and make edits from my phone is huge for working on the go. It means I don't have to be at my desk to get work done.&lt;/p&gt;
&lt;p&gt;&lt;a name="4-10-2025"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/10/2025 - Canvas vs Artifacts: The Plot Thickens&lt;/h1&gt;
&lt;p&gt;Today, I discovered something that complicates my previous assessment: ChatGPT has a Canvas feature that's almost as good as Claude's dual-pane editing for coding or markdown work. It provides similar functionality, allowing you to view both raw and rendered content side by side. However, ChatGPT's Canvas performs slightly worse on mobile compared to Claude's dual-pane interface because it can't be collapsed. While this limitation isn't ideal, it doesn't justify upgrading to Claude Pro. &lt;/p&gt;
&lt;p&gt;On a related note, I also found out that Claude's artifact editing actually requires a Pro subscription—contrary to what I believed on 3/28.&lt;/p&gt;
&lt;p&gt;This was a little awkward because I originally asked Claude and ChatGPT about this feature and neither of them recognized this it. I didn't realize it myself until I told me friend about this idea and he reminded me that ChatGPT DOES have something similar(Canvas).&lt;/p&gt;
&lt;p&gt;An interesting pattern emerges: AI assistants like ChatGPT and Claude seem unaware of their own interface features and platform capabilities. This highlights the separation between the AI models and the applications built around them, reinforcing my earlier observation that they don't "know themselves" very well. But my decision to remain stick with ChatGPT pro becomes easy at this point.&lt;/p&gt;
&lt;p&gt;&lt;a name="4-11-2025"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/11/2025 - Slip Coding: Reclaiming Vibe Coding For Productivity&lt;/h1&gt;
&lt;p&gt;Today I want to introduce a concept I've been developing through my AI-assisted learning journey: Slip Coding.&lt;/p&gt;
&lt;h2&gt;From Vibe Coding to Slip Coding&lt;/h2&gt;
&lt;p&gt;Vibe coding is the process of using emotions, feel, and basic requests; feeding them into an LLM, and using that process to build something. It's more about the feeling and environment than rigorous output. While there's nothing wrong with coding for the vibe, I've found that this framing often leads to aimless tinkering rather than meaningful progress.&lt;/p&gt;
&lt;p&gt;Slip Coding is my attempt to reclaim and refine this concept. It's about using small, otherwise "slippery" pockets of time—a train commute, waiting for a friend at a café, or those 15 minutes before a meeting—to make incremental but meaningful progress on personal projects with the help of AI.&lt;/p&gt;
&lt;h2&gt;How Slip Coding Works&lt;/h2&gt;
&lt;p&gt;Instead of opening social media during these micro-breaks, I open ChatGPT and:
- Brainstorm solutions to coding problems I'm stuck on
- Learn about new tools or libraries in conversational format(Canvas)
- Outline ideas in natural language that will later become code(Canvas)
- Review and refine project structures 
- Think through potential approaches to technical challenges&lt;/p&gt;
&lt;p&gt;Canvas is huge for this, instead of just reading/discussing docs, I can actually start building an actual code file for a project. This isn't going to be perfect(it may not even compile), but it gives me a starting point and lets me think about what I want to do. Then, when I sit down and work, I can be efficient and productive with time spent on personal projects. I can skip the "settling in" part of personal projects and jump right in. And when I finish, I can update my chat with me edits and continue iterating from my phone.&lt;/p&gt;
&lt;p&gt;Voice input provides another layer. If I'm doing chores or an activity where I need my hands, I can still do work, by speaking to the LLM. This is even less rigorous that slip coding from my phone(no visual feedback), but it's just another way to take time back.&lt;/p&gt;
&lt;p&gt;The key insight is that I'm "preloading" my thinking. By the time I actually sit down for a dedicated coding session, I'm not starting cold. My mind has already worked through preliminary obstacles, explored potential approaches, and organized my thoughts.&lt;/p&gt;
&lt;h2&gt;AI's Role in Slip Coding&lt;/h2&gt;
&lt;p&gt;AI assistants are particularly well-suited for Slip Coding because:
1. They're accessible anywhere via mobile
2. The conversational format works well for brief sessions
3. They maintain context long enough to make progress
4. They can switch between high-level abstract thinking and technical specifics
5. They don't require me to actually run code or have a development environment set up&lt;/p&gt;
&lt;p&gt;This approach turns what would otherwise be lost time into creative momentum. It's not about coding without a computer—it's about preparing my mind so that when I do have my development environment, I can hit the ground running.&lt;/p&gt;
&lt;h2&gt;Beyond Aesthetics&lt;/h2&gt;
&lt;p&gt;While vibe coding often focuses on the aesthetics and feel of the programming experience, Slip Coding focuses on building sustainable habits that convert micro-moments into meaningful progress. It's less about the perfect playlist or cozy environment and more about finding ways to keep your projects moving forward in the in-between spaces of life.&lt;/p&gt;
&lt;p&gt;The habit-forming aspect is crucial—once you get used to opening an AI chat instead of social media during these slip spaces, you'll find yourself making steady progress on projects that might otherwise languish.&lt;/p&gt;
&lt;p&gt;A key detail is this only works for personal projects that you really want to work on, but don't have time for. I can't imagine myself being motivated to do work related to my job this way. And the lack of rigor means it's not great for things that have to get done and be right(work tasks). But for personal projects, which are much more flexible, it works beautifully.&lt;/p&gt;
&lt;p&gt;&lt;a name="conclusion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;After several months of experimenting with AI assistants as learning tools, I've arrived at some clear insights:&lt;/p&gt;
&lt;h2&gt;What Actually Works&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Intelligence Amplification, Not Replacement&lt;/strong&gt;: The most valuable approach is using AI to enhance my own thinking rather than expecting it to replace it. This fundamental shift;from treating AI as a solution generator, to using it as a thought partner—transformed its utility for me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interface Matters As Much As Intelligence&lt;/strong&gt;: The right interface for the task often determines an AI's usefulness more than the raw capabilities of the model itself. Claude's dual-pane editing for markdown and ChatGPT's Canvas feature demonstrate how purpose-built interfaces dramatically improve specific workflows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organization Is Critical For Learning&lt;/strong&gt;: Project-level organization and the ability to maintain context across sessions proved essential for deep learning. This quickly eliminated Gemini from consideration and made ChatGPT's memory feature a key advantage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The AI Doesn't Know Itself&lt;/strong&gt;: A consistent pattern emerged—AI assistants have little awareness of their own platform features and capabilities. This separation between model and interface reinforces that we're not working with truly self-aware systems but with tools that require our direction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My journey from AI skeptic to effective user didn't come from better prompting or finding the "right" AI—it came from fundamentally rethinking how I approach these tools. By leveraging my own intelligence first and using AI as an amplifier for learning and organizing thoughts, I've found genuine value that wasn't apparent when I was attempting to use these tools as code generators or problem solvers.&lt;/p&gt;
&lt;p&gt;The key insight remains: AI is at its best when it helps you think better, not when it tries to think for you.&lt;/p&gt;</content><category term="Lab"></category><category term="llms"></category></entry><entry><title>Investing</title><link href="https://mitigatingfailure.com/My%20own%20learning%20experiences%20with%20investing.html" rel="alternate"></link><published>2023-12-24T00:00:00-05:00</published><updated>2024-02-04T00:00:00-05:00</updated><author><name>Niraj Amalkanti</name></author><id>tag:mitigatingfailure.com,2023-12-24:/My own learning experiences with investing.html</id><summary type="html">&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/24/2023"&gt; 12/24/2023 - Guide to Mutual Funds &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/27/2023"&gt; 12/27/2023 - GtMF: Picking Mutual Funds &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/29/2023"&gt; 12/29/2023 - GtMF: Portfolio Ideas, Building, and Monitoring &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/31/2023"&gt; 12/31/2023 - GtMF: Review &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/1/2024"&gt; 1/1/2024 - Mutual Funds for Dummies &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/3/2024"&gt; 1/3/2024 - MFfD: Funds and Alternatives &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/5/2024"&gt; 1/5/2024 - MFfD: Selction, Crafting …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/24/2023"&gt; 12/24/2023 - Guide to Mutual Funds &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/27/2023"&gt; 12/27/2023 - GtMF: Picking Mutual Funds &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/29/2023"&gt; 12/29/2023 - GtMF: Portfolio Ideas, Building, and Monitoring &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/31/2023"&gt; 12/31/2023 - GtMF: Review &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/1/2024"&gt; 1/1/2024 - Mutual Funds for Dummies &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/3/2024"&gt; 1/3/2024 - MFfD: Funds and Alternatives &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/5/2024"&gt; 1/5/2024 - MFfD: Selction, Crafting, and Monitoring &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/7/2024"&gt; 1/7/2024 - MFfD: Review &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/8/2024"&gt; 1/8/2024 - Exchange-Traded-Funds for Dummies &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/9/2024"&gt; 1/9/2024 - ETFfD: What are ETFs? &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/10/2024"&gt; 1/10/2024 - ETFfD: Other types of ETFs &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/12/2024"&gt; 1/12/2024 - ETFfD: Review &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/13/2024"&gt; 1/13/2024 - Bonds for Dummies &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/15/2024"&gt; 1/15/2024 - BfD: Bonds and their  usage &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/17/2024"&gt; 1/17/2024 - BfD: Selecting Bonds and Fixed Income &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/18/2024"&gt; 1/18/2024 - Learning about the Intelligent Investor &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/20/2024"&gt; 1/20/2024 - Another Index Investor &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/21/2024"&gt; 1/21/2024 - BfD: Review &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/22/2024"&gt; 1/22/2024 - A Simple Path to Wealth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/24/2024"&gt; 1/24/2024 - ASPtW: How to become Wealthy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/25/2024"&gt; 1/25/2024 - ASPtW: Tricks and Withdrawing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/26/2024"&gt; 1/26/2024 - ASPtW: Review &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/31/2024"&gt; 1/31/2024 - Intelligent Investor: Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/2/2024"&gt; 2/2/2024 - Advanced Portfolio Management &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/4/2024"&gt; 2/4/2024 - APM: Factor Models &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/12/2024"&gt; 2/8/2024 - APM: Incomplete Review &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/12/2024"&gt; 2/18/2024 - Common Sense on Mutual Funds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Since college, I've been mainly using a robo-advisor(Betterment) that I only started
using because of a deal they offered. &lt;/p&gt;
&lt;p&gt;In the ensuing years; I've definitely made money from their investment selections
and I've never felt their fees have been too high. However, a number of personal events
and changing circumstances have motivated me to put this under closer evaluation
and make better use of my money.&lt;/p&gt;
&lt;p&gt;I know I have zero interest in options and day trading; as is my pattern I would rather spend a lot 
of time up front learning and then sit back and let investments grow.&lt;/p&gt;
&lt;p&gt;Through google searches, reviews, and forums I found a list of books that seem like a good places to 
start; they are as follows&lt;/p&gt;
&lt;p&gt;Guide to Mutual Funds - Postive reviews, but some reviews accuse of simplicity; seems like a good start&lt;/p&gt;
&lt;p&gt;"Dummies" Series for Mutual Funds, ETFs, and Bonds - I anticipate these will be what I invest in&lt;/p&gt;
&lt;p&gt;Common Sense of Mutual Funds - Good reviews but long and boring; a later read after I have an initial understanding&lt;/p&gt;
&lt;p&gt;A Simple Path to Wealth - I like overcomplicating things; this feels like a good step back for after a ton of dense, technical reading&lt;/p&gt;
&lt;p&gt;Advanced Portfolio Management - Quant book if I want to try this&lt;/p&gt;
&lt;p&gt;One key detail I want to learn is not just how to pick funds and build a portfolio, but how
to determine risk and assess based on financial goals. I know different goals will have different approaches
and I doubt it's as simple as "more/less stocks"&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Determine how to set my own financial goals&lt;/li&gt;
&lt;li&gt;Determine how to make my a portfolio and organize my own investments for different goals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="12/24/2023"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;12/24/2023 - Guide to Mutual Funds&lt;/h1&gt;
&lt;p&gt;Book is by a group, Moringstar, they rate mutual funds and provides investment advice&lt;/p&gt;
&lt;p&gt;Book is from before 2008; so it will not discuss that crash, which is interesting&lt;/p&gt;
&lt;p&gt;Reviews suggest book is too simple, but for me it might be a good starting point&lt;/p&gt;
&lt;p&gt;&lt;a name="12/27/2023"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;12/27/2023 - GtMF: Picking Mutual Funds&lt;/h1&gt;
&lt;p&gt;Book is definitely not too simple for me right now&lt;/p&gt;
&lt;p&gt;Moringstar Style Box classifies mutual funds based on size and growth vs value&lt;/p&gt;
&lt;p&gt;Discussion of growth vs value&lt;/p&gt;
&lt;p&gt;Discuss style investing&lt;/p&gt;
&lt;p&gt;Risk&lt;/p&gt;
&lt;p&gt;Fund manager analysis&lt;/p&gt;
&lt;p&gt;KEY- You know your future expense ratio and costs; you don't know your future return(windshield vs rear view mirror)&lt;/p&gt;
&lt;p&gt;&lt;a name="12/29/2023"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;12/29/2023 - GtMF: Portfolio Ideas, Building, and Monitoring&lt;/h1&gt;
&lt;p&gt;Brings up the idea of a "core holding" the basis of a porfolio. Usually growth or value fund for stocks&lt;/p&gt;
&lt;p&gt;Fund prospectuses are good resources for funds; but can very complicated&lt;/p&gt;
&lt;p&gt;Bonds are either treasuries or municipal. Muncipal bonds can be tax free; VERY important if you're in a high tax bracket&lt;/p&gt;
&lt;p&gt;Goes into extreme detail of specialized funds to use as auxillaries for both stocks and bonds&lt;/p&gt;
&lt;p&gt;Recognize that buy and hold is better; DON'T time the market&lt;/p&gt;
&lt;p&gt;Goes into detail for how to make portfolios for different goals. THIS IS WHAT I WANTED&lt;/p&gt;
&lt;p&gt;Indexing and checkups&lt;/p&gt;
&lt;p&gt;Best kind of advisor is time based one&lt;/p&gt;
&lt;p&gt;&lt;a name="12/31/2023"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;12/31/2023 - GtMF: Review&lt;/h1&gt;
&lt;p&gt;Very good introduction&lt;/p&gt;
&lt;p&gt;Not sure how good morningstar is, but good place to start&lt;/p&gt;
&lt;p&gt;Good learnings with growth vs value, importance of expense ratios. Value of indexing&lt;/p&gt;
&lt;p&gt;&lt;a name="1/1/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/1/2024 - Mutual Funds for Dummies&lt;/h1&gt;
&lt;p&gt;Good start; reviewing mutual funds; what they are; drawbacks, etc&lt;/p&gt;
&lt;p&gt;AGAIN, costs of mutual funds are huge; biggest drawback is not paying attention to your costs(where have i heard this before?)&lt;/p&gt;
&lt;p&gt;Notes importances of paying off debts, having insurance, emergency funds, etc before investingj&lt;/p&gt;
&lt;p&gt;&lt;a name="1/3/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/3/2024 - MFfD: Funds and Alternatives&lt;/h1&gt;
&lt;p&gt;Two different types of securities "ownwership" and "lending".&lt;/p&gt;
&lt;p&gt;Does not reccomend individiual stocks; difficulty and diversifying is hard. Makes sense; I want to have a life&lt;/p&gt;
&lt;p&gt;ETFs; a lot of good points for ETFs. Author claims they're too complicated and most people shouldn't bother. I don't know if I 
like this. There are a lot of pros; but a big one is buy/ask spread&lt;/p&gt;
&lt;p&gt;Hedge Funds have high costs and the author claims they are too complicated and too hard to enter anyways. Agree they're too hard
but I don't like ignoring something just because it's too complicated(index funds have demonstrated value of simplicity but it shouldn't be automatic)&lt;/p&gt;
&lt;p&gt;Rules about advisors&lt;/p&gt;
&lt;p&gt;&lt;a name="1/5/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/5/2024 - MFfD: Selection, Crafting, and Monitoring&lt;/h1&gt;
&lt;p&gt;Good stuff on indetinfying funds; morningstart referenced again; I guess it is a good resource&lt;/p&gt;
&lt;p&gt;Prospectuses(discussed previously, brought up again)&lt;/p&gt;
&lt;p&gt;Where to buy funds&lt;/p&gt;
&lt;p&gt;Understanding asset allocation&lt;/p&gt;
&lt;p&gt;Different types of funds MMF, Stocks, Bonds, Specialties&lt;/p&gt;
&lt;p&gt;Taxes&lt;/p&gt;
&lt;p&gt;&lt;a name="1/7/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/7/2024 - MFfD: review&lt;/h1&gt;
&lt;p&gt;Good informaiton; understand mutual funds; how to proceed with them; asset allocation works well with
what I learned from Morningstar&lt;/p&gt;
&lt;p&gt;Again, buying and holding index funds with some diversification is key&lt;/p&gt;
&lt;p&gt;&lt;a name="1/8/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/8/2024 - Exchange-Traded-Funds for Dummies&lt;/h1&gt;
&lt;p&gt;Excited to finall learn more about Exchange Traded Funds, which have come up a lot
but are still a little unclear to me &lt;/p&gt;
&lt;p&gt;Very interested to understand pros and cons vs mutual funds&lt;/p&gt;
&lt;p&gt;&lt;a name="1/9/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/9/2024 - ETFfD: What are ETFS?&lt;/h1&gt;
&lt;p&gt;Basically a stock whose value is tied to a mutual fund(usually index fund)&lt;/p&gt;
&lt;p&gt;Can be cheaper than index mutual funds&lt;/p&gt;
&lt;p&gt;Easier to keep track of capitol gains/losses&lt;/p&gt;
&lt;p&gt;Buy/Ask spread is a potential downside&lt;/p&gt;
&lt;p&gt;Recurring investments are not common; reinvestments must also be manual&lt;/p&gt;
&lt;p&gt;Same classes; growth, value, etc&lt;/p&gt;
&lt;p&gt;&lt;a name="1/10/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/10/2024 - ETFfD: Other types of ETFs&lt;/h1&gt;
&lt;p&gt;ETFs also exist for bonds, commodities, &lt;/p&gt;
&lt;p&gt;Leveraged ETFS; analysis&lt;/p&gt;
&lt;p&gt;Update with John; should investigate more&lt;/p&gt;
&lt;p&gt;&lt;a name="1/12/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/12/2024 - ETFfD: Review&lt;/h1&gt;
&lt;p&gt;Good lessons; combination of ETFs and mutual funds is ideal&lt;/p&gt;
&lt;p&gt;Recurring investments and autopilot investing is probably better with mutual funds(Fidelity exception)&lt;/p&gt;
&lt;p&gt;ETFs still have advantages and important to recognize and leverage&lt;/p&gt;
&lt;p&gt;Again, discussions about advisors&lt;/p&gt;
&lt;p&gt;&lt;a name="1/13/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/13/2024 - Bonds for Dummies&lt;/h1&gt;
&lt;p&gt;Bonds are included in Mutual Funds and ETFs; would like to learn more even
if I don't intend to buy individual bonds&lt;/p&gt;
&lt;p&gt;Same author as ETFs for Dummies; so I think it's good option&lt;/p&gt;
&lt;p&gt;&lt;a name="1/15/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/15/2024 - BfD: Bonds and their Usage&lt;/h1&gt;
&lt;p&gt;Bonds are BORING. Finally have met my match in something that can bore even me&lt;/p&gt;
&lt;p&gt;Reviewing what bonds are; loans with interest rates&lt;/p&gt;
&lt;p&gt;How bonds go up/down in value&lt;/p&gt;
&lt;p&gt;Callability&lt;/p&gt;
&lt;p&gt;Treasuresis, corporate bonds, agency bonds, municipal bonds&lt;/p&gt;
&lt;p&gt;&lt;a name="1/17/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/17/2024 - BfD: Selecting Bonds and Fixed Income&lt;/h1&gt;
&lt;p&gt;Understanding how to select bond funds and how much to put in bonds&lt;/p&gt;
&lt;p&gt;Recognizing how to combine bonds and cash for fixed income portfolios in retirement&lt;/p&gt;
&lt;p&gt;&lt;a name="1/18/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/18/2024 - Learning about the Intelligent Investor and Other Discussions&lt;/h1&gt;
&lt;p&gt;Learned about Intelligent Investor book from two different friends. &lt;/p&gt;
&lt;p&gt;Discussion with Brad about market timing &lt;/p&gt;
&lt;p&gt;Predicting the market&lt;/p&gt;
&lt;p&gt;Started reading but book seems very simple and even more boring than bonds.
Will start listening to as audiobook&lt;/p&gt;
&lt;p&gt;Talking to Gus; he mainly invests in VOO instead of VTI
Also a buy and hold investor&lt;/p&gt;
&lt;p&gt;&lt;a name="1/21/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/21/2024 - BfD: Review&lt;/h1&gt;
&lt;p&gt;Bonds are boring, but good understanding of internals and makes it 
a bit easier to select bond funds. Probably overkill for most people
unless they want to invest in individual bonds(not advisable)&lt;/p&gt;
&lt;p&gt;Bonds are only for stability; have very little use otherwise&lt;/p&gt;
&lt;p&gt;&lt;a name="1/22/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/22/2024 - A Simple Path to Wealth&lt;/h1&gt;
&lt;p&gt;Wanted to read this later after I learned a bit so I could approach the simple perspective with knowledge&lt;/p&gt;
&lt;p&gt;&lt;a name="1/24/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/22/2024 - ASPtW: How to Become Wealthy&lt;/h1&gt;
&lt;p&gt;Good, simple advice. Don't get into debt recognize how your money can grow
50% savings rate is hard; but monk parable is good
Importance of gap money
Market trends(revew)
Another overview of bonds
Asset allocation&lt;/p&gt;
&lt;p&gt;Retirement. VERY good advice&lt;/p&gt;
&lt;p&gt;More opinions on investment advisors&lt;/p&gt;
&lt;p&gt;Very engaging book&lt;/p&gt;
&lt;p&gt;&lt;a name="1/25/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/25/2024 - ASPtW: Tricks and Withdrawing&lt;/h1&gt;
&lt;p&gt;Index funds; market idiots&lt;/p&gt;
&lt;p&gt;Really interesting con discussion&lt;/p&gt;
&lt;p&gt;Retirement; withdrawal tactics; social security(levers idea)&lt;/p&gt;
&lt;p&gt;Foundation&lt;/p&gt;
&lt;p&gt;&lt;a name="1/25/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/25/2024 - ASPtW: Review&lt;/h1&gt;
&lt;p&gt;Excellent book; should've read first. My main rec to anybody, especially people 
who don't want to care too much&lt;/p&gt;
&lt;p&gt;&lt;a name="1/31/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/31/2024 - Intelligent Investor: Review&lt;/h1&gt;
&lt;p&gt;Mostly boring and simple, but good understanding
Felt like this was the base of everything I've learned&lt;/p&gt;
&lt;p&gt;Key detail about markets(I don't know and I don't care, just like ASPtW)&lt;/p&gt;
&lt;p&gt;&lt;a name="2/2/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;2/2/2024 - Advanced Portfolio Management&lt;/h1&gt;
&lt;p&gt;Final book, interested to learn how quants and hedge funds actually work&lt;/p&gt;
&lt;p&gt;Unlikely I'll actually use this but at least I can learn. May not finish book&lt;/p&gt;
&lt;p&gt;&lt;a name="2/4/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;2/4/2024 - APM: Factor Models&lt;/h1&gt;
&lt;p&gt;Hedge funds make sense
Alpha and Beta
Previous authors don't get it, BUT risk still exists
Even though they don't get it; their advice is still decent
Multiple factors&lt;/p&gt;
&lt;p&gt;&lt;a name="2/8/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;2/8/2024 - APM: Incomplete Review&lt;/h1&gt;
&lt;p&gt;Can see where this is going.
Multiple factors, identifying market details
Not relevant to me and I should move on
May come back later but leaving for now&lt;/p&gt;
&lt;p&gt;&lt;a name="2/12/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;2/12/2024 - Discussions with Another Friend&lt;/h1&gt;
&lt;p&gt;Discussed with friend; generally supportive of advie but thinks I'm conservative
Mentioned leveraged etfs and talked about volitaility decay
Point about market following leverage dfunds(invested in pandemic)
Will investigate further later&lt;/p&gt;
&lt;p&gt;&lt;a name="2/18/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;2/18/2024 - Common Sense on Mutual Funds&lt;/h1&gt;
&lt;p&gt;Book by John Bogle; started listening to audiobook like Intelligent Investor
Likely similar to Intelligent Investor; good advice and details but probably not worth read
Listen is enough; will provide review once finished to listening&lt;/p&gt;
&lt;p&gt;&lt;a name="11/24/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;11/24/2024 - Common Sense on Mutual Funds - Bonds&lt;/h1&gt;
&lt;p&gt;It's been some time been; listening to book raises interesting point on
bond funds. Indicates bond funds are always worse than bonds in performance
Understand risks and issues with bonds but I'd like to do the mat on this myself.
I'll add it to my analysis &lt;/p&gt;</content><category term="Lab"></category><category term="investing"></category></entry><entry><title>Cyclegrams Logo</title><link href="https://mitigatingfailure.com/Cyclegrams-Logo.html" rel="alternate"></link><published>2020-08-08T00:00:00-04:00</published><updated>2020-08-08T00:00:00-04:00</updated><author><name>Niraj Amalkanti</name></author><id>tag:mitigatingfailure.com,2020-08-08:/Cyclegrams-Logo.html</id><summary type="html">&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#app"&gt; Cyclegrams &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#git"&gt; Git &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#8/09/2020"&gt; 8/09/2020 - Initial Version Control Scouting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/29/2020"&gt; 12/29/2020 - Initial Sketch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/24/2021"&gt; 1/24/2021 - First Attempt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/10/2021"&gt; 2/10/2021 - Rethinking my Design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/13/2021"&gt; 2/13/2021 - First SVG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/2/2021"&gt; 3/2/2021 - First Draft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/5/2021"&gt; 3/5/2021 - Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/6/2021"&gt; 3/6/2021 - Git Assessment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;I've been building …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#app"&gt; Cyclegrams &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#git"&gt; Git &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#8/09/2020"&gt; 8/09/2020 - Initial Version Control Scouting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#12/29/2020"&gt; 12/29/2020 - Initial Sketch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#1/24/2021"&gt; 1/24/2021 - First Attempt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/10/2021"&gt; 2/10/2021 - Rethinking my Design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#2/13/2021"&gt; 2/13/2021 - First SVG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/2/2021"&gt; 3/2/2021 - First Draft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/5/2021"&gt; 3/5/2021 - Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/6/2021"&gt; 3/6/2021 - Git Assessment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;I've been building an android app for a project idea I had. 
As I mentioned in the about section; I won't always make entries 
for my projects. I don't plan on distributing this app 
on the app store, but I plan to use the app myself. I want to use 
a different logo than the default app logo, and so this 
is a good opportunity to try logo design.&lt;/p&gt;
&lt;p&gt;I've never designed a logo before, but I would like to design a 
personal one in the future. The lack of distribution makes this 
a good, low pressure project 
to try out first.&lt;/p&gt;
&lt;p&gt;Even this wouldn't necessarily be a good reason for a blog post, 
but I've always been interested in the idea of using git for 
version control with design. Since inkscape uses svg(a text file)
as its default file format; this feels like a good place to try it out.&lt;/p&gt;
&lt;p&gt;Since the main goal of this project is to make a usable logo, 
I'm listing it as a studio project. I'll first go into 
detail about the app then git.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Design logo for Cyclegrams app&lt;/li&gt;
&lt;li&gt;Practice logo design &lt;/li&gt;
&lt;li&gt;See how useful git is as design version control with inkscape&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="app"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Cyclegrams&lt;/h1&gt;
&lt;p&gt;The app idea is based on a form of journaling I've been doing for 
the past few years. You have 366 notecards(one for each day of the 
year plus leap day) and on each corresponding day you add a one line 
entry for the current year. I like this because it allows me to reflect 
and gives me easy access to past entries. Unlike an actual journal; you 
don't get caught in some massive nostalgia binge every time you look back 
through your entries. It's roughly a five minute reflection process; 
since each entry is one line. Social media can do this to an extent; but 
it isn't as comprehensive(only when you post or upload pictures). I find 
it much easier to write one sentence about my day than upload a photo 
per day. And I don't always want this info to be public so social media 
is out of the question anyways.&lt;/p&gt;
&lt;p&gt;My main problem with this is how I'm implementing it. Having to carry 
around a giant stack of notecards isn't ideal. And each of these cards 
are valuable; even losing one would be frustrating. But this lends itself 
naturally to a phone app. I can store the data locally, but back up the 
database. And having your phone with you most of the time is almost a 
requirement nowadays.&lt;/p&gt;
&lt;p&gt;I've never built an android app before so this is a new experience for me. 
But unlike, say, OpenSCAD, there are already a lot of tutorials for 
building apps online. And I'm not exactly doing anything novel here; it's 
a pretty simple app. So I didn't see any point to making a blog post on 
the app itself. I'll work on the app concurrently with the logo design 
process. I find context switching between technical and creative topics 
is mentally refreshing for me; though this will probably result in large
time gaps between entries.&lt;/p&gt;
&lt;p&gt;&lt;a name="git"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Git&lt;/h1&gt;
&lt;p&gt;Version control seems like it would be useful for the creative design process. In the past I've always
made different save copies but this is ugly and gets annoying. Using version control, branching, and tags
all seem like great ways to keep track of history and different iterations.&lt;/p&gt;
&lt;p&gt;I've tried discussing this with others and have gotten mixed results. Some claim it would be useful, but
its difficult to use. This is fair; I'm not sure how strong current VC offerings are from
Adobe and other creative companies. And I don't think most creatives are comfortable with git or svn. 
Implementing vc for binary files is still considered non-trivial. Some companies support it, but it's not
as easy or natural as with text files. And most VC is still focused on software projects.&lt;/p&gt;
&lt;p&gt;Other claim vc is unecessary. Good use of non-destructive editing and layers means you can rebuild your design
to any previous iteration without saves. I've heard that Adobe also has a perpetual undo feature which
is helpful for retrieving old versions. I definitely agree that learning to design correctly with layers
is important and version control shouldn't be a crutch to avoid this.&lt;/p&gt;
&lt;p&gt;But at the same time; I don't feel that the latter group has given version control a fair shot, mostly because
they can't. It doesn't feel like there are any strong VC methods for creative projects. Most seem 
far more trouble than they are worth. But with inkscape there might be some potential. Inkscape uses a 
text file(svg) as it's main file format. I can simply use a typical programming version control
system; git being my preference. &lt;/p&gt;
&lt;p&gt;I should point out that my goal here is to evaluate how useful git is as a version control for design for ME.
I'm not a creative and have a nearly orthogonal skillset to them. I have no way of evaluating whether it will
be helpful for creatives in general. But it is easy to determine how useful git will be to me and others
can read and evaluate this process for their own skillsets, should they care.&lt;/p&gt;
&lt;p&gt;But, at the very least, I should look into how people online have used version control for design. I've not
found information on this previously, but I also havent explicitly looked for it either.&lt;/p&gt;
&lt;p&gt;&lt;a name="8/09/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;8/09/2020 - Initial Version Control Scouting&lt;/h1&gt;
&lt;p&gt;First, I spoke to a friend of mine in graphic design. She actually made a good point. She typically
has an idea in mind when approaching a design; so branching and tagging isn't necessary. This makes
sense and is something to keep in mind when I'm using vc for myself.&lt;/p&gt;
&lt;p&gt;I found a few articles discussing VC for designers but they all seem old. There used to be 
a tool called PixelNow, which was a gui wrapper for SVN. Adobe also had a VC system called Cue. I can't
actually find PixelNow anymore, but Cue seems to have been integrated into Adobe's Creative Cloud. CC
saves a history of file version and you can mark different version with names and save them from 
deletion. This sounds like it does the bulk of what VC offers and since it's built into CC; it's easy
to use.&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://www.somewhatcreative.net/design/5-great-version-control-software-for-graphic-designers/"&gt;site&lt;/a&gt;
has a list of version control solutions for creatives. Some of these are baked into applications but
some are standalone products. These look similar to Adobe's in built solution. The main thing they add
is collaboration. I don't have the bandwith to test these out myself, but it's worth noting that there
do seem to be lots of VC solutions for creatives. So my initial conjecture appears to be incorrect, something
also worth noting.&lt;/p&gt;
&lt;p&gt;This last &lt;a href="https://opensource.com/life/16/2/version-control-isnt-just-programmers"&gt;article&lt;/a&gt;, actually has
a designer using Mercurial. They even explicitly mention that Svgs when using inkscape is an excellent use
case. While old(2016), it implies that designers actually tend to ignore VC and the article
suggests using VC for creative projects. That implies that even though VC exists for designers,
it's not really used(these are just a few samples; so take this all with a grain of salt). This could be
because it's not actually useful. Or people don't want to try new things. Or something else I'm not thinking of.
But most of this is academic; I'm not a creative, so our skillsets/objectives may not support the same 
workflows anyways, and I don't need to focus too much on this&lt;/p&gt;
&lt;p&gt;But my friend's point; that having a strong design goal in mind may limit the usefulness of VC, is definitely
something to remember.&lt;/p&gt;
&lt;p&gt;&lt;a name="12/29/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;12/29/2020 - Initial Sketch&lt;/h1&gt;
&lt;p&gt;I began with a quick initial sketch. I don't have a drawing tablet so I did this with my mouse.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/cglogo_sketch.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;First Logo Sketch&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This obviously isn't very good. But the idea I'm going for is a letter surrounded by a "cycle" circle.
This feels like a nice simple logo that's vaguely related to what my app does. It also should go nicely
with the circular icons I use on my phone.&lt;/p&gt;
&lt;p&gt;&lt;a name="1/24/2021"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;1/24/2021 - First Attempt&lt;/h1&gt;
&lt;p&gt;I started by trying to create the circle with an arrow. I first tried creating a circle and was going
to align an arrow on it but I realized this wouldn't work with just black and white colors. I was taught
to initially design a logo in black and white(helps with color design and seperation) and so running into
this issue so quickly wasn't promising. I then tried to use a "C" letter from a sans serif font as a base. 
This would give me a little seperation between the arrow and the loopback.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/cglogo_arciform_circle.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Current State&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;But as I review the app logos on my phone, I feel that continuing with my design would result in one that
is way too busy. Even if I thin out the C; it feels like there will be too much going on inside with the 
mail graphic. I think I'd like to rethink my approach. &lt;/p&gt;
&lt;p&gt;&lt;a name="2/10/2021"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;2/10/2021 - Rethinking my Design&lt;/h1&gt;
&lt;p&gt;My sketch idea wasn't bad but since app logos are so small I think it'll be
a little too busy with the lines for the letter. &lt;/p&gt;
&lt;p&gt;So let's take a step back. Instead of thinking so literally, what's the first 
thing I think of when I hear cyclegrams? For cycle I think of a bicycle. 
Gram may reference a message in this 
case but when I hear gram I think of those tiny gram weights we used in 
high school science classes. Maybe I can try combining these two instant
thoughts?&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/wheel_weight.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Current State&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Again this isn't very good, but it's basically a trapezoid with a spoked wheel where the weight hook should
be. This is a relatively simple design(I may have to play with the number of lines in the wheel), but I can't
find anything similar. The closest would be logos that use the same weight concept but they don't 
have spoked wheels as hooks.&lt;/p&gt;
&lt;p&gt;Since I'm taking a new direction with my ideas, this looks a great oppurtunity to use branching. And git
makes this easy with a simple git branch command. I kept the original sketch in a hidden, renamed layer but
if I decide this direction is a dead end; I can just revert to master instead of reconstructing my original
project with layers.&lt;/p&gt;
&lt;p&gt;&lt;a name="2/13/2021"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;2/13/2021 - First SVG&lt;/h1&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/first_svg.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;First SVG&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This isn't too bad. I'm not going to win any logo design awards, but it's simple. I'm also not going to mix it
up with another app, and it should still work even when it's shrunk down to an app logo size. &lt;/p&gt;
&lt;p&gt;My next step will be to colorize it. I have some idea of how I want to approach this. I'll probably use a 
light teal for the weight fill and a soft beige for the wheel spokes. The weight fill should be easy but
the wheel spokes aren't an object I can fill; so I'll have to be a little more clever with that.&lt;/p&gt;
&lt;p&gt;&lt;a name="3/2/2021"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/2/2021 - First Draft&lt;/h1&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/cglogo_draft.png" width="50%" height="auto"&gt;
    &lt;figcaption&gt;First Draft&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So this is the first draft. I ended up changing the wheel spokes to a cross pattern
because I like the visibility of the cross when scaling the logo. 
The coloration was what I expected but I ended up not liking how the wheel
just kind of jutted out from the top. It also didn't feel like it scaled well when resizing. 
So I ended up moving the wheel to the center of the weight. This does feel extremely simple
but I think this is still unique enough(especially for a personal app logo that will not be
distributed). &lt;/p&gt;
&lt;p&gt;The final change I made was to remove the dot in the center. I'm not exactly sure why I prefer it.
It might be because the black and white structure of the logo is primarily negative space so having 
a small filled part in the center feels inconsistent? I'm not really sure; I'm just stringing together
artistic sounding words in a way that sounds correct. But I do prefer this logo and will consider it for
my first draft.&lt;/p&gt;
&lt;p&gt;At this point, I'd like to let my mind "sit" for a few days and review this later. If I'm still okay with
it then I will consider the logo design finished.&lt;/p&gt;
&lt;p&gt;&lt;a name="3/5/2021"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/5/2021 - Review&lt;/h1&gt;
&lt;p&gt;Well I've thought about it for a few days and I think I'm going to go forward with this.&lt;/p&gt;
&lt;p&gt;Obviously, it's not "perfect". It feels too simple and I'm worried it may not be unique enough.
But since I want a simple logo, it seems aggressive to criticize it for being "too simple". The
lack of uniqueness isn't critical since I'm not distributing this in any way. I usually find
that I never consider my art projects to be "perfect" and I'm told this is fairly common.&lt;/p&gt;
&lt;p&gt;Apparently the wheel plus design I used is a very common design called a sun cross. Despite this,
a sun cross in a trapezoidal shape like mine doesn't appear to be an existing logo so I should be okay.&lt;/p&gt;
&lt;p&gt;The next step would be to merge my branch back into main since I'm going to select this as my 
main logo. Since I never made any changes to master this ended up being utterly trivial and not
a real test of git in this context. I did try making some small changes but wasn't able to 
create any major merge conflict. And I didn't think artificially trying too hard 
to create a merge conflict was a good way to practically test git.&lt;/p&gt;
&lt;p&gt;At this point I will mark this project as stalled. I don't want to declare it finished until
I see the logo in my app; I will probably make some minor adjustments at that point. But I've
been making poor progress in my app development and am unsure when I'll get around to finishing
it.&lt;/p&gt;
&lt;p&gt;However, I can make an assessment of git at this point and will do so before moving to finish the
app.&lt;/p&gt;
&lt;p&gt;&lt;a name="3/6/2021"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/6/2021 - Git Assessment&lt;/h1&gt;
&lt;p&gt;After a bit of consideration I think Git is a good fit for me in these kinds of projects.&lt;/p&gt;
&lt;p&gt;I didn't get the chance to truly test git with some sort of esoteric merge conflicts but what
I did get to see is promising. The xml structure of svg seems to be very intelligently designed. 
It's actually based on the concept of layers and each layer is a top level xml tag. So all of my
changes looked coherent in the xml. &lt;/p&gt;
&lt;p&gt;Even if this isn't a strong case for git, it's worth nothing the effort of using git here was 
non-existent. I'm so fluent in git from work/personal projects, simply making commits with 
comments is trivial. The "design 
log" this ends up creating is probably more than worth the marginal effort of using git. Even
if branching and merging turns out to be more trouble than it's worth, the git history and logs
are sufficient.&lt;/p&gt;
&lt;p&gt;So my evaluation is that I will continue to use git when working on inkscape projects. If I end
up changing my mind about this later, I will amend this entry.&lt;/p&gt;</content><category term="Studio"></category><category term="logo"></category></entry><entry><title>Design Patterns in Rust</title><link href="https://mitigatingfailure.com/Design%20Patterns%20in%20Rust.html" rel="alternate"></link><published>2020-06-13T00:00:00-04:00</published><updated>2020-06-26T00:00:00-04:00</updated><author><name>Niraj Amalkanti</name></author><id>tag:mitigatingfailure.com,2020-06-13:/Design Patterns in Rust.html</id><summary type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to try experimenting with traditional java design patterns in Rust.
I knew the features of Rust would mean I couldn't copy and paste them
from GoF's templates.&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/13/2020"&gt; 6/13/2020 - Why Design Patterns? &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/14/2020"&gt; 6/14/2020 - Preliminary Research &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/15/2020"&gt; 6/15/2020 - Updating Old Project &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/16/2020"&gt; 6 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to try experimenting with traditional java design patterns in Rust.
I knew the features of Rust would mean I couldn't copy and paste them
from GoF's templates.&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/13/2020"&gt; 6/13/2020 - Why Design Patterns? &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/14/2020"&gt; 6/14/2020 - Preliminary Research &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/15/2020"&gt; 6/15/2020 - Updating Old Project &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/16/2020"&gt; 6/16/2020 - New Design &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/17/2020"&gt; 6/17/2020 - Implementing User Struct &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/20/2020"&gt; 6/20/2020 - Designing Internal Api &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/22/2020"&gt; 6/22/2020 - Implementing Internal Api &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/23/2020"&gt; 6/23/2020 - Channels with Serenity &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/24/2020"&gt; 6/24/2020 - Cleaning Up Code &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/26/2020"&gt; 6/26/2020 - Final Thoughts and Objective Analysis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;When discord announced their rust api; I worked with a friend to create a small 
discord &lt;a href="https://github.com/abcde13/SuperBot"&gt;bot&lt;/a&gt;. The bot read a music file
off the filesystem and played it when the user entered the channel. It also played
a file when a goal was scored in the video game, Rocket League. It wasn't particularly
easy to use or robust; we made it more to learn Rust than to use it. And while we
learned the basics of Rust, we never really got around to exploring how to implement more 
extendable designs using Rust's trait system.&lt;/p&gt;
&lt;p&gt;Traits can be described as a more rigid way of implementing "duck typing" 
which is how Python handles object behavior. Instead of characterizing objects by
their datatype; you define their behavior with traits and use these traits to define
when they can be used. This is also similar to implementing interfaces in Java.
It is supposed to be semantically clearer than using objects, since in most usage 
cases you really care about what an object can do; not what it is.&lt;/p&gt;
&lt;p&gt;I typically program in Object-Oriented languages and make extensive use of design
patterns when designing larger programs. I find they help make programs easier to adapt
and extend, but they require forethought and careful use. Originally, design patterns
were designed for Java and their explicit implementation works best there. I currently work 
in Computer Vision research and use Python and C/C++ at work. Both of these languages
have object systems, but their nuanaces mean I always need to adapt the design pattern
to both the language and use case.&lt;/p&gt;
&lt;p&gt;Rust's traits are even more different that Java's objects. I'm curious to see
how or even if design patterns still work. I do think the high level ideas(creating 
guidelines on solving frequent, specific types of problems) will still work in Rust.
But the actual implementations may be drastically different. &lt;/p&gt;
&lt;p&gt;I plan on using this chat bot to investigate this. I don't want it to be tied a game
so I will drop the feature that plays output for scoring in Rocket League. To be more
robust; I will have the bot try and use youtube videos to play music instead of 
a taking an audio file from the filesystem. Since I'm changing the original purpose
I will fork and rename the bot. This is the new &lt;a href="https://github.com/namalkanti/DynamicEntryBot"&gt;repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I mentioned in my previous &lt;a href="http://mitigatingfailure.com/Rust and Kotlin.html"&gt;post&lt;/a&gt; 
that I wanted to find concrete use cases for Rust.
I want to clarify that this is not one. I will likely not use this bot and don't
expect anybody else to. This project is more of an excercise to test out design patterns
in Rust. And as I also saw in my previous entry, my ideas in this area don't always pan out. 
So we'll see how this one goes.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Refactor the old bot into one that only plays music when a user enters a channel&lt;/li&gt;
&lt;li&gt;Investigate design patterns in Rust with the trait system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="6/13/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/13/2020 - Why Design Patterns?&lt;/h1&gt;
&lt;p&gt;What exactly are design patterns? The simplest way to describe them is that they
are high level guidelines for common problems in software engineering. If a problem
is concrete, you can abstract it into a library and be done. But some problems are 
more vague and can't easily be built into a library that's useful for most users. But
these problems occur very frequently, so it makes sense to have some way to discuss them
instead of vague descriptions. This is a very simple paraphrasing and for those not 
familiar with design patterns I'd suggest this &lt;a href="https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124"&gt;book&lt;/a&gt;. 
It looks childish, but it's an excellent high level overview of design patterns; including
good examples for using them. Most people suggest the classic Gang of Four(GoF) &lt;a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=pd_lpo_14_t_0/142-4926188-2343330?_encoding=UTF8&amp;amp;pd_rd_i=0201633612&amp;amp;pd_rd_r=c935072f-585f-4f50-af54-1ed0f5d29e5a&amp;amp;pd_rd_w=v5oRp&amp;amp;pd_rd_wg=Rnjdu&amp;amp;pf_rd_p=7b36d496-f366-4631-94d3-61b87b52511b&amp;amp;pf_rd_r=FT5QD7E1X78JTZ6GX7KZ&amp;amp;psc=1&amp;amp;refRID=FT5QD7E1X78JTZ6GX7KZ"&gt;book&lt;/a&gt;,
but I find this book to be too verbose for a first read. The Head First book will give you
a good high level overview of design patterns, and then you can read the GoF book for more details.&lt;/p&gt;
&lt;p&gt;One mistake people make when discussing or using design patterns is that they think of them
too rigidly. Design Patterns were originally made for Java; and some say they help compensate
for Java's weaknesses. Other languages don't need design patterns because they have features
like higher order functions built in. But I think this is too myopic. Using design patterns
exactly the way they are for Java in other languages is incorrect, yes. But if that was all
that design patterns were, they could be made into a library. They're more high level
guidelines and can be implemented in other languages differently.&lt;/p&gt;
&lt;p&gt;This sounds very abstract so I'll use a concrete example with the strategy pattern. If you
aren't familiar with this pattern this discussion won't make any sense, so I'd review it first.
In Java, the strategy pattern is implemented by using different objects for different
algorithms with a common Java interface. In Python, we could do something similar, except
using duck typing and ensuring our objects have the necessary methods. But Python has
higher order functions, so instead of creating objects for each algorithm, we can just 
pass around higher order functions instead. Java doesn't support this, so it looks like
we're using design patterns to address this weakness. But I'd argue we are still using
the strategy pattern in Python. The strategy pattern is creating an abstraction for some
set of algorithms. In Java we do this with objects. In Python we do this with higher order
functions, but our higher order functions still need a consistent interface(interface here
means function prototype). So we're still creating an interface and abstracting away
details of behavior, because we recognize we may want this behavior to change. This is 
what design patterns really are. But it's very difficult to see without an example. And 
it's very easy to see how some people might think the details for implementing design
patterns are very rigid. Of course, even in Python, there may be situations where we 
should favor the object approach instead of higher order functions. It all depends on
exactly what your problem is.&lt;/p&gt;
&lt;p&gt;These kinds of problems reoccur frequently in software engineering. But their abstractness
makes them difficult to describe. So design patterns also provide us with a concise vocabulary
to discuss these kinds of problems. Rather than spend twenty minutes describing this 
problem I could say "it's the strategy pattern" or "it's a variation on the strategy pattern".
Anybody who knows design patterns would instantly have a strong grasp on my problem,
and be able to help me with it.&lt;/p&gt;
&lt;p&gt;Another way design patterns help software engineers is by developing their "precognition".
Once you become familiar with them; you can start recognizing them. This lets you predict
how the software might evolve, and you can ask your product manager what they think. It's
important not to overengineer pre-emptively, but raising these concerns in advance can
help everybody think about how the software may change and what's the best way to handle 
that. It's a 
balancing act between overengineering and not digging yourself into holes, and design
patterns can help identify and address these areas ahead of time.&lt;/p&gt;
&lt;p&gt;So then are design patterns "perfect"? Of course, not, they have trade offs like every 
design decision and you shouldn't always use them. Always using shiny design patterns
results in overengineering and can make you codebase large and unwieldly. Design patterns
generally have a simple trade off. You add complexity to your software in exchange for
isolating some part and allowing it to change independentally. If you know this will happen
frequently it's an excellent trade off. If not, then you're adding needless complexity.
Granted, most problems are rarely this black and white and you'll need to make decisions
based on your case. So it's important to recognize the 
trade offs, both in general, and in your specific problem.&lt;/p&gt;
&lt;p&gt;This kind of recognition ability comes with practice. Another personal example I can give
to demonstrate the benefits of this is how I approach my own research code. I currently
work as a computer vision researcher; when trying out different approaches I'll often
start with simple python scripts with Spyder and/or Jupyter. Obviously, it makes no sense
doing any serious software design here. But as I add to these scripts they can become
quite difficult to use. I end up commenting out lines, or changing parameters by changing
source code. I can try to use functions, but even this becomes too weak very quickly.
But because of my experience recognizing and applying design patterns; when these issues
show up, I can very quickly refactor my code to use them. This keeps my scripts simple
and easy to use and allows me to run my experiments more confidently. Instead of 
scrambling through my code to make sure everything is commented out correctly. This
does take some additional time, but always pays off.&lt;/p&gt;
&lt;p&gt;A concrete example of this is when building neural networks. Hyperparameter tuning is 
a big part of neural network training and involves sweeping through different combinations
of parameters for different network types. This ends up being a perfect fit for the 
builder pattern; I can use it to easily construct different networks set with whichever
defaults I want for certain experiments. And it's easy to redo these experiments
without having to deal without commenting out different parts of code. My familiarity
with design patterns lets me do this with minimal time or thought penalties; and identify
and address them very early. I make overengineering mistakes sometimes, but I always learn
from them. And the time and brain bandwitdh saved more than makes up for it.&lt;/p&gt;
&lt;p&gt;C/C++ are similar enough to Python that this carries over easily. The stronger typing
and slower evolution of the code actually makes it easier to apply these techniques there.
I now want to develop this skill in Rust. Rust's trait system is different than a traditional
object system. I don't want to misuse this so I need to learn how to apply design patterns
to Rust.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/14/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/14/2020 - Preliminary Research&lt;/h1&gt;
&lt;p&gt;First, I wanted to see what kind of information there was on this area beforehand. I 
found some github repos with design pattern examples, but I didn't find this to be helpful.
As I mentioned, a discussion for a specific use case is usually important to understanding design
patterns. Concrete code examples without context don't really help. But the Rust &lt;a href="https://doc.rust-lang.org/book/ch17-00-oop.html"&gt;docs&lt;/a&gt;
have this. There's an entire chapter on traditional OO principles,
how to use them in Rust, and which standard Rust features can be better. This is 
exactly what I wanted.&lt;/p&gt;
&lt;p&gt;Reading the documentation was very helpful. They describe how to implement a basic 
blog using the concrete GoF state pattern; then give an example of how to do it better
in Rust. The basic idea is, instead of storing a state variable, you actually tranform
your object into different objects to indicate state. Rust's ownership mechanics 
make this possible. This kind of object transformation feels somewhat like a fusion
of functional and object-oriented programming. But using types to denote state means
the Rust compiler can step in and recognize when something is being used in a way that
it shouldn't. But behavior is still tied to each state object so changing and adding states
is the same as the state pattern. &lt;/p&gt;
&lt;p&gt;This was a very useful example and I'm interested to see how my own project might 
use similar ideas. My only criticism is that the documentation seems to support the 
idea that design patterns are these rigid constructs and their rust implementation "isn't
a design pattern". I'd argue their implementation is still using the basic ideas of the 
state pattern; just applied with Rust's own unique features. Nevertheless; this is a semantic
criticism at best, and not worth dwelling on.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/15/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/15/2020 - Updating Old Project&lt;/h1&gt;
&lt;p&gt;The first step should be updating the old project to get ride of the code I don't 
need. I'd also like to test it and make sure it works as I expect(plays music from
filesystem when I join the channel).&lt;/p&gt;
&lt;p&gt;Unfortunately, the first thing I note is the discord api I was using is no longer
regularly maintained. There seems to be a new &lt;a href="https://github.com/serenity-rs/serenity"&gt;one&lt;/a&gt;
, but this is one issue of using Rust. It lacks the popularity of other 
languages so edge cases
like this are not likely to be maintained over long periods of time.
And as I mentioned earlier, this is probably not a good use case for Rust anyways, so 
I can't really expect anything.&lt;/p&gt;
&lt;p&gt;This puts me in an awkward situation. I could go ahead and implement the bot with a new
api. This is only a research experiment and if it goes stale, it's not a big deal.&lt;/p&gt;
&lt;p&gt;But maybe I can turn this into something. Design patterns are meant to adapt to 
change when it's expected. Perhaps I can design this application and abstract
away the discord api. So when it does change, all I would need to do(if I wanted to update
it), is make the necessary changes to this layer. 
This is referred to 
as the veneer design pattern. I'm creating an api of my own, that my code will conform
to. So if the api changes, I won't need to change my 
own code. I just need to update my
internal api &lt;/p&gt;
&lt;p&gt;But this means; there's no point in updating this existing code. I might be able to 
reuse some of it, but now I need to design this application. That will be my first step.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/16/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/16/2020 - New Design&lt;/h1&gt;
&lt;p&gt;I want this bot to play music when a user enters the voice channel. So the first thing
this bot needs is to keep track of everybody in the channel. I can store this as a 
vector of users. We'll keep them as strings for now.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/first_dynamic_bot.png" width="20%" height="auto"&gt;
    &lt;figcaption&gt;First Datatype&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So my internal discord api will need to log in and query a list of users in the channel;
which will be used to initialize my vector.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/second_bot.png" width="80%" height="auto"&gt;
    &lt;figcaption&gt;Datatype with Internal Api&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;However, this will just be the initialization step. Afterwards I'll need a loop where
the internal api listens to the external one and pushes updates to the DynamicBot.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/third_bot.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Init and Event Loop&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So what else? Well each user will have their own music they want for their entry theme.
So rather than keep this seperate, I should use a struct for each user instead of a string
and store a vector of those.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/final_dynbot.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Final Diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now that my sketch is complete. I want to review it. This is a pretty simple design. 
Most of the work will be getting the event loop to synchronize between my internal and
the external api.&lt;/p&gt;
&lt;p&gt;The veneer pattern is justified here. I expect the rust api I'm using to change so
it makes sense to abstract that away.&lt;/p&gt;
&lt;p&gt;Another pattern I considered was using a command pattern to push the music playing 
behavior in the the UserStructs. If I wanted to support multiple types of behavior,
this would be a good idea. But I don't plan on adding any other types of behavior, 
so this would be 
needless complexity. My first task will be to implement the user structs.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/17/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/17/2020 - Implementing User Struct&lt;/h1&gt;
&lt;p&gt;Implementing this piece should be simple. The tricky part is initialization. Each
user will have a name and a piece of music for them. I don't want to store this in 
code, so I'll need a way to initialize these objects.&lt;/p&gt;
&lt;p&gt;I ended up using yaml to do this. I prefer using yaml when working with data that's
meant to be edited by people. I was hesitant at first, since I expect json to be 
more reliably supported. But the serde json library I've used in rust has yaml
bindings as well. If this isn't supported at any point I can always convert the 
yaml into json; the api is exactly the same.&lt;/p&gt;
&lt;p&gt;I did make a few changes. I created a registered user field in the DynamicBot to store
a HashMap with usernames as keys and music identifiers as values. This gets
loaded from the yaml file. Then I will go
back to using a list of Strings to keep track of users in a channel, as I originally
meant to. There's no need for a struct for Users; once the music file plays I don't
need to keep track of it. &lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/updated_struct.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Updated Diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I've tagged the gitrepo with the state of the codebase right now, &lt;a href="https://github.com/namalkanti/DynamicEntryBot/tree/6-17"&gt;here&lt;/a&gt;.
I ended up commenting out all the code in main.rs. This is ugly, but I'll 
remove it eventually and it'll let me use it as a reference while I develop.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/18/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/18/2020 - Diagram Update&lt;/h1&gt;
&lt;p&gt;I realized today that I don't need to store the list of current users in a vector. 
I'm not attempting to do any exit actions or changing behavior based on current users.
This also means the initialization step doesn't require the internal api; so I'll update
it to explictly reference loading the yaml file. So I've updated the diagram to remove this.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/no_current_users.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Updated Diagram&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name="6/20/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/20/2020 - Designing Internal API&lt;/h1&gt;
&lt;p&gt;One aspect I need to address with the internal api is how to handle logins. In the previous version I used a struct
to implement the traditional state pattern. But, as I noted &lt;a href="#6/14/2020"&gt;earlier&lt;/a&gt;, the &lt;a href="https://doc.rust-lang.org/book/ch17-03-oo-design-patterns.html"&gt;docs&lt;/a&gt;
have a better idea. I can have the DynamicBot struct return a LoggedOut type that uses a login method
to return a DynamicBot. This allows the Rust compiler to keep track of the types and whether methods 
are valid or not.&lt;/p&gt;
&lt;p&gt;For the internal api, I need two methods; one that waits for the name of somebody who enters the channel, and 
another method that takes the music string.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/bot_states.png" width="60%" height="auto"&gt;
    &lt;figcaption&gt;Bot States and Internal Api&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I've tagged the repo in its current state &lt;a href="https://github.com/namalkanti/DynamicEntryBot/tree/6-20"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/22/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/22/2020 - Implementing Internal API&lt;/h1&gt;
&lt;p&gt;The api I'm using is this &lt;a href="https://github.com/serenity-rs/serenity"&gt;one&lt;/a&gt;; it seems to be
most well supported at the time of this writing. It looked intimidating at first; but
the examples were helpful to understand how to approach the implementation. &lt;/p&gt;
&lt;p&gt;I want to keep my internal api seperate from serenity; as per the veneer design pattern. So
what I did is spawn Serenity in a seperate thread; and use mpsc channels to handle communications
between Serenity and my internal api. This is definitely a lot more complex. But the trade off is
I can change the external api and keep the rest of my code untouched.
I was able to finish the internal api's implementation and next I'll need to make sure the
message passers are working from inside Serenity.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/namalkanti/DynamicEntryBot/tree/6-22"&gt;current repo state&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="6/23/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/23/2020 - Channels with Serenity&lt;/h1&gt;
&lt;p&gt;Sending the channels to Serenity was a little complex. The mpsc channels can
be sent to other threads safely, but Serenity shares information across all event handlers,
so I can't pass the channels to my explicit target endpoint. This means I need to guard
them with mutexes and arcs. The mutexes implement locks and the arcs keep track of
the channels if multiple threads were to access them. I won't ever create such a situation,
but it is allowed in the code so I have to account for it. This is just Rust forcing
me to be very explicity when dealing with concurrency. But they have designed both
the Arc and Mutex types to make this as painless as possible.&lt;/p&gt;
&lt;p&gt;Serenity also has a way to handle audio playback. This was buried in the (surprisingly good)
documentation. But I can easily handle playback using youtube-dl or ffmpeg. Both need
to be installed as command line tools, but I had both of them already.&lt;/p&gt;
&lt;p&gt;Now I have a working prototype! I was able to log into my test channel and used
the youtube-dl endpoint to play music when I joined. There was a small delay to
account for the download, but it works! &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/namalkanti/DynamicEntryBot/tree/6-23"&gt;current repo state&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="6/24/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/24/2020 - Cleaning Up Code&lt;/h1&gt;
&lt;p&gt;I cleared out all the warnings; most of this had to do with not handling errors correctly.
I also made use of Rust's module system to organize the api a bit better. I added a 
logout command so I don't always have to Ctrl-C the bot from the command line. I really
like the error messages the Rust compiler gives out. They're easy to understand and 
don't feel like a cryptic mess.
Because of this I felt much more confident refactoring my Rust code.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/26/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/26/2020 - Final Thoughts and Objective Analysis&lt;/h1&gt;
&lt;p&gt;Well, at this point I have the bot in a working state with reasonably clean code structure.
Is there more I could do? I could make some quality of life changes so I can join channels 
with their names and store users with names instead of IDs. If this was a legitimate project,
I would probably have to do so. But for this research experiment I don't think it's necessary.
The work would really come down to investigating the api until I figured out how the get 
the information I need.&lt;/p&gt;
&lt;p&gt;I'm very pleased with Rust. Most of the annoyance I had with this project was getting the api
to work and even that wasn't so bad once I learned how to navigate the documentation. While
pedantic, the rust compiler does a great job of telling you why it doesn't like some piece
of code you're writing. I also really like the trait system and how Rust handles types. Using
object transformation for the state pattern feels very natural. And the trait system allows me
to add behavior without thinking about some complicated object structure.&lt;/p&gt;
&lt;p&gt;Something I'm less pleased with is how verbose some of the code can be. And it's not always 
easy to hide code behind functions, because you need to be very careful with references and 
how you use your variables. This wouldn't stop me from using(or enjoying) Rust, but it's 
something to note.&lt;/p&gt;
&lt;p&gt;So did I accomplish my goals? I'd say so, yes. I refactored the bot into a working version 
with the serenity api. There are some quality of life annoyances with usage, but it works.
I also played around with design patterns and found two natural cases with the state pattern
and the veneer pattern. Both patterns provide benefits for their increased complexity. With the
state pattern, I learned how to modify a design pattern for use in Rust. And I rejected a use
case for a design pattern(command pattern for user info) because it added complexity and 
wasn't necessary.&lt;/p&gt;
&lt;p&gt;However, everything isn't perfect. As I mentioned in this previous project, I want to develop
Rust as a secondary language. I did see how that could be difficult in the future. This bot 
was a just a research experiment, not something I was genuinely enthusiastic about building. 
This meant my motivation to do so was sometimes weak. I noted how I didn't feel the need to
add some quality of life improvements, but if this was a project I was genuinely passionate 
about; I would've done so without hesitation. I have plenty of these projects but it is hard
to justify using Rust instead of Python or C++. The quarantine going on right now means I
have time to invest in these Rust maintenance projects, but when everything returns to normal
I'm not sure I will be able to so. So my ability to keep Rust as a secondary language
will hinge on whether I have personal projects where Rust is genuinely the right choice.&lt;/p&gt;
&lt;p&gt;But, this has no bearing on the goals for this project, so I am happy with marking it as
successful.&lt;/p&gt;</content><category term="Lab"></category><category term="rust"></category></entry><entry><title>Rust and Kotlin</title><link href="https://mitigatingfailure.com/Rust%20and%20Kotlin.html" rel="alternate"></link><published>2020-06-02T00:00:00-04:00</published><updated>2020-06-15T00:00:00-04:00</updated><author><name>Niraj Amalkanti</name></author><id>tag:mitigatingfailure.com,2020-06-02:/Rust and Kotlin.html</id><summary type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to pick a new language to learn and maintain my skill in. I also wanted to make sure
I had use cases for the new language so I had practical reasons to continue using it. 
I ended up picking Rust as this language,
but I couldn't come …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to pick a new language to learn and maintain my skill in. I also wanted to make sure
I had use cases for the new language so I had practical reasons to continue using it. 
I ended up picking Rust as this language,
but I couldn't come up with any concrete use cases.&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/2/2020"&gt; 6/2/2020 - Method &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/3/2020"&gt; 6/3/2020 - Discussion:Python and Django &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/4/2020"&gt; 6/4/2020 - Discussion:Rust and Rocket &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/5/2020"&gt; 6/5/2020 - Discussion:Kotlin and Spring Boot &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/6/2020"&gt; 6/6/2020 - Implementation:Python and Django &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/7/2020"&gt; 6/7/2020 - Reviewing Rust docs &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/8/2020"&gt; 6/8/2020 - Reading Rocket docs &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/9/2020"&gt; 6/9/2020 - Investigating Diesel and Changing the Project &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/10/2020"&gt; 6/10/2020 - Implementing the New Project &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/11/2020"&gt; 6/11/2020 - Starting the Kotlin Project &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/12/2020"&gt; 6/12/2020 - Rethinking My Plan &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/13/2020"&gt; 6/13/2020 - The Decision &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/14/2020"&gt; 6/14/2020 - Use Cases &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/15/2020"&gt; 6/15/2020 - Final Thoughts and Objective Analysis &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#10/10/2024"&gt; 10/10/2024 - Update: Kotlin &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#10/12/2024"&gt; 10/12/2024 - Update: Rust &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;I consider my "primary" languages to be Python and C/C++. I use both of these languages 
at work and in my personal projects. The other languages I know, I consider to
be "tertiary" languages. These are languages I've done a few projects 
in but I don't regularly use them. What I'd like to do is add a "secondary"
language to my skillset. This would be a language I don't use with extreme regularity
, but a language I pay attention to
and try to use semi-frequently. This language would ideally be useful in areas 
that Python and C/C++ don't cover. A secondary language would require an ongoing 
maintenance commitment which is why it's not a trivial decision. &lt;/p&gt;
&lt;p&gt;I actually tried adding Haskell as a secondary language in the past. I had heard 
a lot of good things about Haskell and was interested in trying it out.
I learned about it through this &lt;a href="http://learnyouahaskell.com"&gt;book&lt;/a&gt;. It introduced a lot
of interesting ideas and I was initially excited to use it more. 
I decided I would implement this blog using Hakyll, a static site generator in Haskell. 
However, like
most of my side projects, I worked on it infrequently. Because Haskell is so different from
Python and C++ I usually spent my time "working" on my blog instead on Haskell review.
Which I then forgot when I came back to it. Obviously, I got nothing done and decided
to use Pelican instead. Haskell was too different from my existing knowledge base and
honestly; Pelican was a better fit for this kind of project for me. So now, I want to
pick a language that's more similar to Python/C++ while still extending my skillset. I'd also
like to find some clear use cases. I want this work to be useful to me, instead 
of just being a project to maintain my skill in the language. Otherwise I might make
the same mistake and try to force this new language in areas where I shouldn't.&lt;/p&gt;
&lt;p&gt;Over the past few years I've been exposed to a lot of languages, but there are two
stand outs; Rust and Kotlin. Both appeal to me for different reasons which I will 
detail later.&lt;/p&gt;
&lt;p&gt;The git repo where these projects will be is &lt;a href="https://github.com/namalkanti/idfinder-samples"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Identify a choice for my secondary language &lt;/li&gt;
&lt;li&gt;Identify use cases for my secondary language&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="6/2/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/2/2020 - Method&lt;/h1&gt;
&lt;p&gt;The method I will use to evaluate this decision is an interesting one. Some time ago;
I made a very simple web app with a friend as a way to learn Django. This web app
was a small site where you would post pictures of lost University IDs along 
with contact info. Somebody who lost their ID would look this up and find the person who
located it. We never planned on deploying it; it was an exercise to learn Django. &lt;/p&gt;
&lt;p&gt;This same exercise would be useful for this investigation as well. Python, Rust, and Kotlin
all have fairly mature frameworks for web development. Not only would I get a chance
to learn more about the language; I would also get to see how libraries in the language
are used. This is better than some toy example which would only require basic code.
But this exercise is simple enough that I won't be spending a huge amount of time on the app;
which is good because I'm repeating it three times. Using the same example will also
give some consistency to my comparison.&lt;/p&gt;
&lt;p&gt;I want, to again, emphasize that I won't necessarily use Rust or Kotlin for web dev even though
that's what I'm doing in this exercise. If they are better than Python+Flask for my projects
then I will, but otherwise I'll use what I'm familiar with. That's also why I want to figure
out other use cases for this secondary language. I'm only using a web app because 
it's something simple that all three languages have mature support for. That consistent 
example will be helpful in my comparisons.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/3/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/3/2020 - Discussion:Python and Django&lt;/h1&gt;
&lt;p&gt;I used Django as the framework to implement the original idfinder app. This
was to learn Django, but I mainly use Flask for any needs I have in
building web apps. None of my personal projects need the complexity of Django or Pyramid. 
Most of them need a simple web server that responds to http requests. But this
project will require databases and forms. I could add these modules to flask, but I'd
have to pick all the modules for these tasks myself. Django has a "batteries included"
philosophy. Since this is meant to be a simple control example, I will use
Django again for this project.
But the Django implementation is out of date (Django 1.7, which ran on Python2). 
So my first task will be to redo the app in a recent Django version for a more 
consistent and recent comparison. &lt;/p&gt;
&lt;p&gt;&lt;a name="6/4/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/4/2020 - Discussion:Rust and Rocket&lt;/h1&gt;
&lt;p&gt;I was initially introduced to Rust when Mozilla began using it for their firefox rendering engine.
The concepts of being safe with memory and fixing issues during compilation appealed to
me. When discord released their Rust api, a friend of mine and I implemented a small chat 
bot. I learned the basics of rust through this project. I found it to be verbose, but I
did like some of their implementation decisions. Their memory management model is very similar
to smart pointers in C++; so I quickly adapted to it. I did not get a chance to really
use the trait system. Normally; I use object oriented languages and this is the paradigm
I'm familiar with. Rust's traits are different in that they emphasize object behavior instead
of identity. This is supposed to be semantically clearer when defining datatypes and how
they should be used. Leaving the traditional object oriented paradigm is a way that
learning Rust can expand how I think about programming.   &lt;/p&gt;
&lt;p&gt;&lt;a href="rocket.rs"&gt;Rocket&lt;/a&gt; is a web development framework in Rust that's mature. Some initial code samples
suggest it's very similar to Flask; so I hope to adapt to it quickly.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/5/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/5/2020 - Discussion:Kotlin and Spring Boot&lt;/h1&gt;
&lt;p&gt;Kotlin is a language I discovered when investigating Android app development. I'm fairly
familiar with Java and initially felt there was no point in learning another language.
But I started going through a udacity &lt;a href="https://www.udacity.com/course/kotlin-bootcamp-for-programmers--ud9011"&gt;course&lt;/a&gt; 
and the more I learned about Kotlin, the more
I began to like it. Kotlin feels like a language that was designed by programmers and 
a lot of the language features are ideas I've wished were in other languages. 
Google also now supports Kotlin as an official android language 
which gives it more weight. The course itself was a little... cringe-worthy... to a 
fault. I couldn't
tell if it was intentional for satire or the instructors just lacked charisma. But 
the material was excellent.&lt;/p&gt;
&lt;p&gt;Kotlin's JVM backend is also a benefit. &lt;a href="clojure.org"&gt;Clojure&lt;/a&gt; is a language I've wanted to experiment with
for some time. Like Haskell, clojure is a massive departure from what I'm used to, and 
building standalone applications in Clojure could be unecessarily arduous for me. I could
support it with Java, but I don't like Java that much. But I like Kotlin a lot, and it could
help support my clojure experiments.&lt;/p&gt;
&lt;p&gt;One question that might come up here is "Why not Scala?". I've held a low key interest in
Scala for some time. It's supposed to combine functional programming with a more traditional
paradigm to be considered a more practical language. While I find this enticing; it doesn't
quite grab me the way Kotlin's syntax and design decisions did. But the ability to explore
Scala later is definitely an attractive aspect of Kotlin.&lt;/p&gt;
&lt;p&gt;Rust would expand my view about how I program but Kotlin would expand my views on tooling.
I use IDEs when required to at work, but for personal programming I prefer using Vim 
and the command line(on Linux, course). Kotlin really seems to encourage the use of an
IDE (IntelliJ). So developing Kotlin as a secondary language could increase my familiarity
(and acceptance) of IDEs.&lt;/p&gt;
&lt;p&gt;The most well known JVM web framework to me is Spring. Spring requires a lot of configuration
and knowledge, but there seems to be a project called Spring Boot. Spring Boot is supposed
to be a simpler project that defaults a lot of options for you. So I will use Spring Boot 
for this exercise.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/6/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/6/2020 - Implementation:Python and Django&lt;/h1&gt;
&lt;p&gt;The implementation process was relatively straightforward. I was able to copy most of my 
existing code from the older Django version. There were a few things that changed(mostly syntax)
and Python3's default unicode simplified or eliminated some code in the previous version.&lt;/p&gt;
&lt;p&gt;Revisiting Django reminded me how pedantic the framework is. I understand the value 
of such a rigorous framework; mainly in situations when you're working on a project
with lots of different people. But it definitely feels like overkill for a personal 
project. But it does do a lot of work for you, unlike flask, where I might spend just
as much time getting everything set up. I've heard pyramid is supposed to fill a gap
between the two projects, and it might be worth looking into some time in the future.
But I don't want to explore that tangent now.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/7/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/7/2020 - Reviewing Rust Docs&lt;/h1&gt;
&lt;p&gt;I started with reviewing the official rust &lt;a href="https://doc.rust-lang.org/book/"&gt;docs&lt;/a&gt;. I 
note that it's expanded quite a bit since I looked at it back in 2016. The review
reminded me that while Rust seems verbose; it's usually only because the language
wants you to be explicit with what you want. It is capable of type inference and some
constructs have syntactic sugar when appropriate. I wasn't extremely thorough; there 
are a lot of complicated concepts and I'll review them as I start going through Rocket's 
documentation. Some of them I remember from my earlier work with Rust but some are new.&lt;/p&gt;
&lt;p&gt;Something I note is that the reccomended way to install and update rust is a new tool called rustup.
Normally I maintain tools using the package manager in my linux distro but 
rustup is what is now suggested. Rustup allows you to easily switch your rust toolchain
based on build type(stable vs nightly) and also makes it easier to handle toolchains
for different CPU architectures. I've cross-compiled C++ for ARM and know that it can be
messy; so I can see the value of this. You can also override the toolchain on a by directory 
basis; so it's a little like Python's virtualenv. &lt;/p&gt;
&lt;p&gt;Another interesting aspect of Rust are its macros. These are meant for syntactic sugar
and to specify Domain Specific Languages. DSLs are a feature that have always interested
me. But I note that macros are definitely a work-in-progress now; and subject to changes.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/8/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/8/2020 - Reading Rocket Docs&lt;/h1&gt;
&lt;p&gt;My next step was Rocket's &lt;a href="https://rocket.rs/v0.4/guide/"&gt;docs&lt;/a&gt;. They expected a good
understanding of Rust beforehand and I definitely felt that this was tested. Rocket
feels somewhat like a DSL in Rust for building web apps. It's still Rust but there's
a lot of macros and specific ways functions need to be used and called. Rocket doesn't
provide a templating engine or database ORM so I will need to include these.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/9/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/9/2020 - Investigating Diesel and Changing the Project&lt;/h1&gt;
&lt;p&gt;I found a lot of posts that discussed integrating Rocket with an ORM(Diesel seems to
be the best choice), but this was the best &lt;a href="https://medium.com/digitalfrontiers/web-service-with-rust-rocket-and-diesel-7425f4a04f4c"&gt;post&lt;/a&gt;.
In addition to providing me a tutorial, it also had an excellent analysis of Rust, Rocket,
and Diesel. The author, Marco Amann, seems to have a similar style to mine and his other
posts are investigations into different technologies. I should keep him in mind as a 
good example.&lt;/p&gt;
&lt;p&gt;He showed that Diesel actually requires you to write SQL by hand. This is a turn off
to me, but Amann notes this is actually very powerful. There are a lot of database 
modeling tools that generate SQL for you; and this approach allows you to use them and
leverage the unique traits of each database. I recognize that value of this, but as 
somebody whose database needs don't require this level of detail and control; it's not
quite as valuable.&lt;/p&gt;
&lt;p&gt;Amann continues to note that Rust and Diesel require fairly tight integration of the 
database layer and views. Each view needs a handle to the database connection in order
to use it. It's not as neatly abstracted as it was in Django.&lt;/p&gt;
&lt;p&gt;This new information motivates a change in project. Not only will I have to set up
Diesel, I'll also have to figure out how to use a templating library, if I want to create
the same project in Rocket that I made in Django. My goal here is not to learn web app
development in different languages; it's to simply try the language out. This particular
approach will be a lot more work and I really don't think I'll gain much from it. In fact,
I already feel like I have a good assesment on Rust and Rocket from the docs and examples.
But I don't want to move on without completing something concrete. So instead, I'll
use a json file to store information about the id cards instead of a database. I'll write
two views, one which will return a list of the id cards in json and another which will
return individual id card information, also in json, based on an input id. This will 
mean that I won't need to use a templating library either. But this kind of response is what I
might use if I was using some javascript front-end framework; so it's not total garbage.&lt;/p&gt;
&lt;p&gt;I feel this is a much more reasonable project that will satisfy my goals for Rust and Rocket
without adding a lot of unecessary work.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/10/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/10/2020 - Implementing the New Project&lt;/h1&gt;
&lt;p&gt;Now that I've simplified my parameter scope, this was much easier to implement. I used
serde_json; which seems to be the de facto official json library in rust. Creating and 
mounting the views was also simple. But even with this simple example I needed to be
very explicit about when I was borrowing references. Rust definitely makes sure you're
being very explicit about what you want when coding. I was originally going to discuss
what I liked and disliked about Rust but I think I'll save the breakdown for the end
and include Python and C/C++ as well. Now I should move on to Kotlin and Spring Boot.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/11/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/11/2020 - Starting the Kotlin Project&lt;/h1&gt;
&lt;p&gt;There's a lot of tutorials using Kotlin and Spring Boot but I'm focusing on this 
&lt;a href="https://spring.io/guides/tutorials/spring-boot-kotlin/"&gt;one&lt;/a&gt;.
Getting Spring Boot started was interesting. I'm using the Community version of IntelliJ
so I wasn't able to start the project from the IDE. Instead I went to this &lt;a href="https://start.spring.io"&gt;site&lt;/a&gt;
and downloaded a zip with all the configuration files. This was easy enough to set up
but this process feels ... weird to me. I suppose it's not actually different than an IDE setting 
everything up, but it feels different. As I went through the tutorials I started to see
how dense Spring is. Even with Spring Boot handling a lot of set up, it feels like there's
a lot of work that's being done for me and I'm not aware of what's going on. I didn't
really look into other web frameworks but considering how much is hidden from me in Spring
it might be a good idea to find a simpler framework.&lt;/p&gt;
&lt;p&gt;I found another framework with a good reptuation called &lt;a href="https://ktor.io"&gt;ktor&lt;/a&gt;. They have
an excellent tutorial and it feels more like Rocket or Flask than Spring or Django. I can't
help but wonder whether I should've used Flask and SQLAlchemy for a simplied example for Python
to stay consistent. Django doesn't feel like Rocket and I'm not sure all this work is 
important. This level of uncertainty means I should revaluate my plan.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/12/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/12/2020 - Rethinking My Plan&lt;/h1&gt;
&lt;p&gt;I stated in the beginning my goal was to evaluate Rust and Kotlin to select a secondary
language for my skillset. And I emphasized that, even though I'm building web apps, 
I probably won't use either of these languages for web apps and this is supposed to be
to see how to evaluate libraries in each language. &lt;/p&gt;
&lt;p&gt;But despite my claim, this really feels like I'm evaluating web frameworks. When I'm 
thinking about each stage; I'm focusing on differences between Django, Rocket, and now 
Spring. I really should be focusing on Python, Rust, and Kotlin. This means .... I messed
up. I think my idea sounded good but it's not really working. I already learned about 
both languages through their docs and the udacity course. I should've picked a simpler
project or library to use. Or maybe a project wasn't even necessary; I could've just
had a discussion based on the courses/reading I already did. 
At this point I'm focusing too much on web frameworks and 
their idiosyncrasies instead of the language itself.&lt;/p&gt;
&lt;p&gt;So what's my new plan? I really don't need to finish this Kotlin project. I also 
don't like leaving things unfinished. But I've already wasted a decent amount of time
on this and I'm not really enjoying this process anymore. Personal projects are supposed
to be fun and useful. I feel like I've already gotten the 
information I need so now it's time to make a decision.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/13/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/13/2020 - The Decision&lt;/h1&gt;
&lt;p&gt;Because of my wasted time I ended up reviewing the Udacity &lt;a href="https://www.udacity.com/course/kotlin-bootcamp-for-programmers--ud9011"&gt;course&lt;/a&gt; 
on Kotlin again. I want to make sure I'm giving it a fair assesment since I've spent 
so much time on Rust. First I'll go over what I like about my existing languages.&lt;/p&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;h2&gt;What I Like&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Easy syntax&lt;/li&gt;
&lt;li&gt;Interpreted language is trivial to debug&lt;/li&gt;
&lt;li&gt;Strong api support almost everwhere&lt;/li&gt;
&lt;li&gt;Fun to program in&lt;/li&gt;
&lt;li&gt;Works well with C/C++ for speed ups&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Dislike&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic typing creates annoying runtime errors and excessive debugging&lt;/li&gt;
&lt;li&gt;Can be difficult to create good style when working with larger groups&lt;/li&gt;
&lt;li&gt;Deployment is messy(virtualenvs help, but it's not an ideal fix)&lt;/li&gt;
&lt;li&gt;Global Interpreter Lock makes multi-threading difficult&lt;/li&gt;
&lt;li&gt;Very slow with out C/C++ support&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;C++&lt;/h2&gt;
&lt;h2&gt;What I Like&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Smart pointers and C++14/17 addons make language far more enjoyable(not quite fun though)&lt;/li&gt;
&lt;li&gt;Works extremely well with Python &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Dislike&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Auto helps but the language feels very rigid due to lack of type inference&lt;/li&gt;
&lt;li&gt;Requires lots of code to enforce type safety&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both languages have weaknesses, but for my own use cases; the combination is extremely
powerful.&lt;/p&gt;
&lt;h2&gt;Rust&lt;/h2&gt;
&lt;h2&gt;What I Like&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rust compiler is excellent at forcing me to recognize ambiguities and address them&lt;/li&gt;
&lt;li&gt;Memory management is very similar to C++ smart pointers and feels like an easy transition&lt;/li&gt;
&lt;li&gt;Trait system feels really powerful and I'm excited to work with it&lt;/li&gt;
&lt;li&gt;Tooling feels simple&lt;/li&gt;
&lt;li&gt;Easy to build static executables mean deployment can be very simple&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Dislike&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Code is very verbose, can be ugly. &lt;/li&gt;
&lt;li&gt;Can feel very annoying when fighting with the borrow checker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust has a lot of interesting features. Forcing extra attention to detail when writing
code and dealing with errors during compilation means I don't have to deal with 
annoying runtime errors. The trait system is really interesting and I'm eager to explore
how I can use it when designing applications.&lt;/p&gt;
&lt;p&gt;My biggest issue with rust is how verbose and ... well, ugly it can be. Lifetimes in
particular just look bad. And combining lifetimes with generics makes Rust code look
incredibly busy.&lt;/p&gt;
&lt;h2&gt;Kotlin&lt;/h2&gt;
&lt;h2&gt;What I Like&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Concise syntax feels very simple&lt;/li&gt;
&lt;li&gt;Syntactic sugar feels appropriate and makes coding easier&lt;/li&gt;
&lt;li&gt;Feels fun&lt;/li&gt;
&lt;li&gt;Features like interface delegation make designing and implementing complex designs simple and fun&lt;/li&gt;
&lt;li&gt;JVM integration allows me opportunities to explore other languages like Clojure more easily&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Dislike&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tooling and build system feels incredibly complicated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kotlin really impressed me with it's concise syntax and interesting features. Interface delegation
is one in particular I can't get over. Rust may be fun to design software in, but I feel
that Kotlin is more fun to actually write code for.&lt;/p&gt;
&lt;p&gt;My biggest issue with Kotlin is the tooling. IntelliJ is probably my favorite IDE(the 
only other ones I've used are Eclipse, Visual Studio, and Xcode), but I still can't say
I enjoy IDEs. I recognize their value, especially with large projects with multiple
developers, but it's not something I enjoy dealing with for personal projects. Even if 
I don't use IntelliJ, Kotlin requires Gradle which still feels complex. It's nothing
like Rust and Cargo.&lt;/p&gt;
&lt;p&gt;So what's my decision? It's probably obvious, but I think Rust is the best pick for me. 
It might feel like this a biased decision or I didn't give Kotlin a fair chance, but I 
think it comes down to what the language adds to my skillset and how I feel about it. &lt;/p&gt;
&lt;p&gt;Rust expands my viewpoint with traits which are different from the object systems I'm used
to. I'm very excited to see how I can use Rust's trait system to implement my designs.&lt;/p&gt;
&lt;p&gt;Kotlin was meant to expand my viewpoint by using IDEs and a more rigid build system. Even
after trying it and noting the advantages, I still think of it a chore.&lt;/p&gt;
&lt;p&gt;That really makes the decision clear. I'll still use
Kotlin when I need to (Android apps) but I won't invest in it the same way as Rust.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/14/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/14/2020 - Use Cases&lt;/h1&gt;
&lt;p&gt;In addition to selecting a language, I also decided I wanted to make sure I have some
good use cases. Otherwise it'll be more difficult to keep my familiarity with Rust without
actually making up projects to do so. I want to avoid the same mistake I made with Haskell.&lt;/p&gt;
&lt;p&gt;Rust's site defines four main areas the Rust team wants to focus Rust for; so this
is probably what I'll look at.&lt;/p&gt;
&lt;h2&gt;Command Line&lt;/h2&gt;
&lt;p&gt;The first target they mention is command line tools. Currently I use python for all
my command line tools. It's large amount of supporting libraries and ease of debugging
make it easy to quickly prototype tools and start using them. &lt;/p&gt;
&lt;p&gt;However a big issue when distributing command line tools is the environment. Spawning
virtual envs just for command line tools is annoying. And making sure those venvs are all 
consistent is a chore. But for personal tools it's not clear how much of a problem it
is. I have desktop and a laptop so keeping those envs consistent isn't too hard.&lt;/p&gt;
&lt;p&gt;Still, Rust definitely has advantages here. I should definitely consider Rust for cli
tools I use.&lt;/p&gt;
&lt;h2&gt;WebAssembly&lt;/h2&gt;
&lt;p&gt;This is an interesting case. WebAssembly seems to be the new kid on the block for front
end web development. I don't really do any front end web stuff and don't really have 
a desire to do so. Probably not a strong use case, but I think it's something I should 
keep an eye on.&lt;/p&gt;
&lt;h2&gt;Networking&lt;/h2&gt;
&lt;p&gt;From my experiences with Rocket, I'm not actually sure I like Rust, personally, for this
use case. Rocket does have benefits but I'm not sure they're for me.&lt;/p&gt;
&lt;h2&gt;Embedded Systems&lt;/h2&gt;
&lt;p&gt;This use case feels powerful. Rust's tooling allows easy cross-compilation for different
architectures. I've done cross-compilation for ARM on iOS devices using cmake and it isn't
pretty. Rust's abilities in memory mangement will make it easier to keep memory issues
in check. And debugging runtime issues in embedded systems can be a nightmare; so having
everything addressed during compilation is attractive. I do have some project ideas with fpgas
and rasberry pis that could make use of this. So this could be a good use case.&lt;/p&gt;
&lt;p&gt;My main problem is that I don't have very many of these and they'll likely be inconsistent.
Useful, yes, but not the kind of work that'll help keep my Rust skills sharp over time.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/15/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/15/2020 - Final Thoughts and Objective Analysis&lt;/h1&gt;
&lt;p&gt;So this project's course was a lot more complicated and a lot more embarrassing.
I had an idea at first; but it ended up being a huge distraction. But I did say that
I wanted this blog to show up my screw-ups, not just successes. I should own up to that.&lt;/p&gt;
&lt;p&gt;I do feel that I accomplished my first goal of selecting a secondary language. Rust 
does feel like it neatly fills a gap that I have between Python and C/C++. It's a lot 
more fun than C/C++ but doesn't have python's sluggishness. The tooling and dependency
management is also fantastic, some thing both Python and C/C++ can struggle with.&lt;/p&gt;
&lt;p&gt;But I don't honestly know when I'll use it. There's potential for use in embedded projects
but I don't have very many of those. I can maybe see it being useful for CLI projects
but I need to remember my lessons from Haskell. I shouldn't just use Rust for projects
I actually need because I want to use Rust. If Python is better for my cli tool I should use it. This may
mean I need to make up projects to develop and maintain my Rust skills and I don't know how easy that
will be for me to do in the long term. Or even if it's something I really will want to
do over time.&lt;/p&gt;
&lt;p&gt;So I'm going to mark this project as partial success. I don't really feel like I've come
up with strong use cases for Rust for myself. I'll try to keep it as a "secondary" language
but we'll ultimately see how well that turns out. Rust is a lot more similar to Python and 
C/C++; so it has that in favor of Haskell, at least. But whether I can keep up motivation
to support a language for what's basically "academic" purposes remains to be seen.&lt;/p&gt;
&lt;p&gt;&lt;a name="10/10/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;10/10/2024 - Update: Kotlin&lt;/h1&gt;
&lt;p&gt;There's been some new developments relevant to this topic so I'm adding updates.&lt;/p&gt;
&lt;p&gt;I still haven't found a good use case for Rust as a secondary language. 
One of my co-workers (an Android dev) persuaded me to give Kotlin another
chance. I knew Android app dev is an area I want to improve in and Kotlin is required(unless I 
want to use Java). This motivated me to revaluate Kotlin.&lt;/p&gt;
&lt;p&gt;But it was obvious that the same issues remained. Kotlin's IDE dependence put me off, especially 
libraries like &lt;a href="https://ktor.io"&gt;ktor&lt;/a&gt; or &lt;a href="https://spring.io/projects/spring-boot"&gt;spring boot&lt;/a&gt; 
that expected you to use an online project generator
to start your projects. I can see the value of this in large companies, but I can't imagine
going through this for a personal project. I also notice that Kotlin doesn't have a lot
of adoption outside of Android. The main use case is replacing Java(a good one), but it doesn't 
appear that people are actively creating new Kotlin projects for standard applications.
This differs from Rust or Go; where I see this more frequently. &lt;/p&gt;
&lt;p&gt;However, this let me review my priorities and goals and I now have two main goals with Kotlin/JVM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Dev&lt;/li&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Android Dev&lt;/h2&gt;
&lt;p&gt;This has been a lower priority, but I really want to become more comfortable with Android app development.
I'd like to get to the point where I can easily build an app for myself when I need it, just like how I can
easily write a script or small program for these problems on a standard computer. &lt;/p&gt;
&lt;h2&gt;Clojure&lt;/h2&gt;
&lt;p&gt;I've still been eyeing Haskell but have not pursued it. But the more I look at Clojure, the more I see 
the similarities. And since Clojure is on the JVM, I can use Java libraries to support it along with Kotlin
if needed. I'm not sure I can motivate myself to pursue Haskell further, but I think Clojure has enough utility.&lt;/p&gt;
&lt;p&gt;I don't think I will pursue Kotlin as a general purpose programming language for now, but if I really end up
liking it that may change. That could happen from either goal. However, I will continue to regard Kotlin as a 
tertiary language for myself, but now I have more direction in how I want to use it. &lt;/p&gt;
&lt;p&gt;&lt;a name="10/28/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;10/12/2024 - Update: Rust and perhaps a use case ?&lt;/h1&gt;
&lt;p&gt;My disappointment in Kotlin motivated me to revaluate Rust but I took a quick detour into Haskell. This ended
up being interesting because it became obvious to me how much Haskell has influenced Rust. Now that I understood
Traits and datatypes like Option/Result, Haskell typeclasses and Maybe/Either made a lot more sense to me. In fact,
maybe one reason for Rust's popularity is converts from Haskell. This new familiarity has lead me to a new idea.&lt;/p&gt;
&lt;p&gt;When I learned C, one application was using C for command line tools. C tools are much faster than Python scripts
and compiling into a single, static executable makes for easy deployment(instead of Python virtualenvs).
But creating makefiles and writing C is too much effort for simple tools when a Python script will do.
But Rust's tooling simplifies the build process(and allows for cross-compilation). And it's much easier
to organize Rust code into multiple files instead of a single Python script. I'm also realizing the subtle difference
between a script and command line tool.&lt;/p&gt;
&lt;h2&gt;Script vs Command Line Tool&lt;/h2&gt;
&lt;p&gt;A script is usually a set of instructions for a task that needs to be automated with some minimal configuration.
But a command line tool is a utility like grep, awk, sed, etc; that does some semi-customizable unit of work. They're
similar but a cli tool usually is run more frequently and needs to have more complex customization with flags. Because of this,
Rust has several advantages over Python for command line tools.&lt;/p&gt;
&lt;h3&gt;Speed&lt;/h3&gt;
&lt;p&gt;For scripts that are started and just let run, Python is fine. But if I want a tool I use frequently on the 
command line, the centuries spent waiting for the Python interpreter will add up over time.&lt;/p&gt;
&lt;h3&gt;Organization&lt;/h3&gt;
&lt;p&gt;Python does have &lt;a href="https://click.palletsprojects.com/en/stable/"&gt;click&lt;/a&gt;; which is neater than argparse, 
but a single python script can get very large
when trying to add subcommands and a lot of functionality. This is true even with click. But Rust's easy
tooling lets me build a single executable while keeping the source organized in multiple files. 
This is an advantage of building cli tools with C that I learned
about when learning C, but the build tooling with C always put me off. Cargo fixes this issue with Rust; 
allowing me to easily build a single statically linked executable. But I can maintain code readability
by splitting it up into as many files/modules I need. With Python I'm force to make trade
offs regarding file size/organization&lt;/p&gt;
&lt;h3&gt;Why not Bash?&lt;/h3&gt;
&lt;p&gt;Bash makes sense for small, simple scripts where the goal is to just chain together commands, but anything
more complex can be difficult in bash. I think it makes sense to improve my bash skills so I can do scripts
in bash but use Rust for command line tools. I will investigate this.&lt;/p&gt;
&lt;p&gt;&lt;a name="11/12/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;11/12/2024 - Update: Bash for Scripts&lt;/h1&gt;
&lt;p&gt;Interestingly enough, I ended up deciding to keep Python for my scripts. Bash is nice in theory, but anything
even slightly complex is just cleaner in Python. One script I tried converting was a simple one that copies music
files by parsing a text based playlist file and syncing them. This is trivial in Python, but even using tools
like Sed and Awk lead to complex and hard to maintain code. &lt;/p&gt;
&lt;p&gt;Improving my bash is still a good idea, and I think there are scripts I can use better bash skills to create.
But the falloff is very quick and Python becomes a better option with an even moderate amount of complexity.&lt;/p&gt;
&lt;p&gt;&lt;a name="11/18/2024"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;11/18/2024 - Update: Rust for CLI tools&lt;/h1&gt;
&lt;p&gt;Initially, I was using a bunch of complex bash alises for some build tooling at work. I wanted to use Rust, but
I decided to use bash first. As cool as Rust is, if Bash is better, I should go with it.&lt;/p&gt;
&lt;p&gt;But I ran into the same problem.... I had ideas for default/optional flags for easy usage. But implementing this in
bash is not trivial. Using getopts does not handle optional parameters well. It requires state logic and creates
dependencies on the ordering of the flags. The tool, getopt, does this much better,
but the versioning and capabilities differs tremendously depending on the OS. Trying to figure out these version
differences sounds like a giant mess that I really don't want to deal with. &lt;/p&gt;
&lt;p&gt;I ended up using subcommands with semi-arcane bash syntax. This wasn't perfect, but I found that his accomplished
90% of what I wanted with a command line tool. &lt;/p&gt;
&lt;p&gt;But eventually; the 10% forced me to resort to ugly hacks. I then rewrote the tool in Rust. This took longer than the bash script, 
but it wasn't extreme. Now that
this version works, I find that I like using it a lot more. It's much easier to configure and adapt as I need to make
changes. The bash tool could've worked but as my needs for this tool expanded Rust was ultimately the better option.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think there's a fine and difficult to assess line between using Rust or Bash for command line tools. It probably
makes sense to start with bash but if I find that bash is too limiting I should switch. But now I FINALLY have 
a personal use case for Rust!&lt;/p&gt;</content><category term="Lab"></category><category term="rust"></category><category term="kotlin"></category></entry><entry><title>Arch Linux Keychain</title><link href="https://mitigatingfailure.com/Arch-Keychain.html" rel="alternate"></link><published>2020-05-22T00:00:00-04:00</published><updated>2020-05-22T00:00:00-04:00</updated><author><name>Niraj Amalkanti</name></author><id>tag:mitigatingfailure.com,2020-05-22:/Arch-Keychain.html</id><summary type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to created a keyring accessory that looked like the Arch Linux logo
and intended to create a 3D model and print it; this ended up being way
easier than expected&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/22/2020"&gt; 5/22/2020 - Initial Fumbling &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/23/2020"&gt; 5/23/2020 - Tutorials &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/24/2020"&gt; 5/24/2020 - 3D Printing Service …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to created a keyring accessory that looked like the Arch Linux logo
and intended to create a 3D model and print it; this ended up being way
easier than expected&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/22/2020"&gt; 5/22/2020 - Initial Fumbling &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/23/2020"&gt; 5/23/2020 - Tutorials &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/24/2020"&gt; 5/24/2020 - 3D Printing Service &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#6/08/2020"&gt; 6/08/2020 - Final Thoughts &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;As a Linux user I love opportunities to show off my preferred operating system.
Recently I tried looking for a keychain for the Arch Linux logo. I wanted a 3D model
of the logo, but I couldn't find one for sale. The closest I found was a 3D model 
somebody else made and printed for themselves.
I have no experience in 3D modeling or printing, but it's something 
I've wanted to learn. This sounds like a good, simple project to get started with. &lt;/p&gt;
&lt;p&gt;For 3D printing what I'd like to do is learn a program called &lt;a href="https://www.openscad.org"&gt;OpenSCAD&lt;/a&gt;.
It's a CAD tool intended for programmers because it uses a text based file format. Some
googling suggests it doesn't have the same professional reputation as SolidWorks or 
AutoCAD but it can be a powerful tool if you learn to use it. The main criticism is that
it's so drastically different from other CAD tools, it doesn't make sense for most
people to bother learning it. Especially since there's no professional value. But I've 
never used any other CAD tool and have no interest in pursuing CAD professionally. 
However, a text format is something I'm
very comfortable with. Anther advantage with text formats is it 
makes version control very easy. So it makes sense for me to try learning OpenSCAD
instead of a more conventional CAD tool.&lt;/p&gt;
&lt;p&gt;I'm going to use github to keep track of my files the repo is &lt;a href="https://github.com/namalkanti/Arch-Keychain-Model"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use OpenSCAD to create a STL file of the Arch Linux logo as a keychain&lt;/li&gt;
&lt;li&gt;Learn the basics of OpenSCAD&lt;/li&gt;
&lt;li&gt;Print the stl file using some online service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="5/22/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/22/2020 - Initial Fumbling&lt;/h1&gt;
&lt;p&gt;Normally, I'd search a bunch of tutorials on OpenSCAD and view them before opening the
application. But the simplicity of this project suggests a different approach. Maybe I'll
start with fumbling my way through the application and see what happens. I have an
svg of the arch linux logo; maybe I can export that to a format and import it into 
OpenSCAD? If I could do that, I could try extending the logo in the third dimension. Then
I'd just need to cut a hole out for the keyring and I'd be done. I don't know if this
is how CAD is supposed to work but it's worth a shot.&lt;/p&gt;
&lt;p&gt;First, I note that OpenSCAD works well with external text editors. The built in editor
can be hidden and the preview window will update when saving files with an external 
editor. So I can happily use vim to edit my scad files.&lt;/p&gt;
&lt;p&gt;Googling my approach lead to an interesting result. Normally, you should export your svg
as another file type intedend for 2d machine work(dxf). That can be imported into OpenSCAD.
But very recently(5/2019), OpenSCAD actually added an svg import. So I can import my 
svg into OpenSCAD directly.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/openscad_after_import.png" width="90%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Workspace after attempting svg import&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This doesn't look bad for 30 minutes of blind fumbling. I tried an stl export
for the hell of it, but my object isn't considered a 3D object. When I switch
to render mode; I see that the object is flat. This makes sense since an svg is 2D. So 
this preview mode(pictured above) is just an approximation.&lt;/p&gt;
&lt;p&gt;So then I need to extend this object next. Before I do that, I should probably try to 
cut out a circle for the keyring. The best way to do this would be to reload the svg
in inkscape and cut the hole out there. It's possible to use OpenSCAD's difference 
function, but since the difference is based in 2D, I think it makes sense to handle
it in inkscape.&lt;/p&gt;
&lt;p&gt;I also wanted to see if OpenSCAD would automatically load my changes when I saved them 
in Inkscape; this does work. I'll admit to being very impressed with OpenSCAD so far. 
They claim to be a CAD tool for programmers, but I didn't expect them to live up to
that claim so well.&lt;/p&gt;
&lt;p&gt;The extension to 3D is a function called "Linear Extrusion"; I found a beginner tutorial &lt;a href="http://edutechwiki.unige.ch/en/OpenScad_beginners_tutorial#Import_and_extrude_2D_graphics_from_SVG"&gt;here&lt;/a&gt;
that does exactly what I want. It's a little outdated because it claims I need to export
my svg as a dxf file. But I can extrude my svg with the current version of OpenSCAD.&lt;/p&gt;
&lt;p&gt;At this point, I can actually get an stl import. But I have no idea what the units or
the size of the output will be. I also have no idea how the flow of execution for OpenSCAD
works; I'm just following the tutorials ordering.&lt;/p&gt;
&lt;p&gt;Google quickly tells me stl doesn't enforce units and you need to specify them at print. 
Often, 1 unit
length is just 1mm so I will use that convention. My desired length for the keychain is 
48mm so I need to resize my object to that length. This can be done with the scale 
function which can also auto scale the y dimension.&lt;/p&gt;
&lt;p&gt;I'm not sure but this might mean I'm done? I have an stl file scaled for 1mm. I think 
my next step should be to look at actual OpenSCAD tutorials to see if I'm missing something. If 
not I can try to find 3d printing services and send off my design. Perhaps my project
is a little too simple...&lt;/p&gt;
&lt;p&gt;&lt;a name="5/23/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/23/2020 - Tutorials&lt;/h1&gt;
&lt;p&gt;Googling some tutorials gave me the basics. An openscad file is basically a collection of
"actions" which create objects and "operators" which act on those actions. 
In this example the action was an svg import. Compiling these
together creates a model. In CAD this approach is called 
Constructive Sold Geometry.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/scad_analysis.png" width="80%" height="auto" class="border"&gt;
&lt;/figure&gt;

&lt;p&gt;You can also define variables and functions(functions are called
modules) for more complex projects. Vectors and Loops also exist and have the expected
functions. This kind of reminds me of verilog; where a somewhat simple, specialized 
language can be very expressive for its domain. It looks like I fumbled my way into the
right approach. Now I feel a bit more confident that my file is correct; so next 
I'll look up 3D printing services.&lt;/p&gt;
&lt;p&gt;&lt;a name="5/24/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/24/2020 - 3D Printing Services&lt;/h1&gt;
&lt;p&gt;Some quick googling lead to a large list of 3D printing services. I'm not really sure
how to pick them but &lt;a href="https://www.shapeways.com"&gt;Shapeways&lt;/a&gt; seems like a good fit. It's not meant for industrial printing
and they'll let me print a single object. They have a lot of materials but it looks like
their versatile plastic is available in a blue for the arch linux logo. It's not terribly
expensive ($12.00) but the shipping cost is almost the same as the model($9.00). They 
don't offer any cheaper version, so I'll have to deal with it. This feels too easy....
But I'm not sure what else to do. They estimate it'll take a month until my print arrives
so I guess I'll see how well I did when it gets here.&lt;/p&gt;
&lt;p&gt;&lt;a name="6/08/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;6/08/2020 - Final Thoughts&lt;/h1&gt;
&lt;p&gt;It finally came in today! A little earlier than I expected.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/arch_print.jpg" width="40%" height="auto" class="border"&gt;
&lt;/figure&gt;
&lt;p&gt;It looks exactly like what I wanted and fits on my key ring. Feels sturdy too; though I'll
have to use it a bit more to see. I guess it really was that simple. OpenSCAD's ability 
to directly import svgs made this project extremely trivial; even for a novice like me.&lt;/p&gt;
&lt;p&gt;So how to mark this project? I did use OpenSCAD to build a 3D model and successfully 
printed it with a printing service. However, it feels hesitant to say that I really
learned the basics of OpenSCAD. My project was simple, too simple. So I will be 
marking this project as a partial success. Maybe in the future I can do another
project and really get to learn the basics of OpenSCAD.&lt;/p&gt;</content><category term="Workshop"></category><category term="openscad"></category></entry><entry><title>Resume Template</title><link href="https://mitigatingfailure.com/Resume.html" rel="alternate"></link><published>2020-03-19T00:00:00-04:00</published><updated>2020-05-31T00:00:00-04:00</updated><author><name>Niraj Amalkanti</name></author><id>tag:mitigatingfailure.com,2020-03-19:/Resume.html</id><summary type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to redo my resume so I designed a layout in Inkscape and investigated
several tools to implement my design. Scribus was the one I selected and I 
feel it's an excellent choice for resume design. But Scribus itself has
a large learning curve and you really need …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;p&gt;I wanted to redo my resume so I designed a layout in Inkscape and investigated
several tools to implement my design. Scribus was the one I selected and I 
feel it's an excellent choice for resume design. But Scribus itself has
a large learning curve and you really need to be using styles correctly
to get the most out of it. This may discourage a lot of other users.&lt;/p&gt;
&lt;h3&gt;Entries&lt;/h3&gt;
&lt;p&gt;&lt;a href="#overview"&gt; Overview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#3/31/2020"&gt; 3/31/2020 - Resume Sketch &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/1/2020"&gt; 4/1/2020 - Google Docs &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/8/2020"&gt; 4/8/2020 - Scribus Tutorials &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/9/2020"&gt; 4/9/2020 - Zack Grossbart's Blog &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/10/2020"&gt; 4/10/2020 - InDesign Blogs &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/14/2020"&gt; 4/14/2020 - Scribus &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/15/2020"&gt; 4/15/2020 - Bruce Byfield's Work &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/16/2020"&gt; 4/16/2020 - Designing with LibreOffice &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/18/2020"&gt; 4/18/2020 - LibreOffice &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/19/2020"&gt; 4/19/2020 - Revisiting Latex &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/22/2020"&gt; 4/22/2020 - The Decision &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#4/28/2020"&gt; 4/28/2020 - Finishing Sample Content and Layout &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/03/2020"&gt; 5/03/2020 - Picking Initial Fonts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/24/2020"&gt; 5/24/2020 - Finishing up Styling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/29/2020"&gt; 5/29/2020 - Finishing Layout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/30/2020"&gt; 5/30/2020 - Adding Icons&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#5/30/2020"&gt; 5/31/2020 - Final Thoughts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;I created my resume right after college using a LaTex template I found online.
I became familiar with LaTex because of college assignments and liked that I
could edit the tex file in vim. The layout was pre-designed so I didn't need 
to worry about it and could focus on the content of my resume.
I've been updating it since, but I'm finding the layout doesn't communicate
my skillset well anymore.&lt;/p&gt;
&lt;p&gt;Making the drastic changes within the LaTex is getting too cumbersome so I've 
decided to take a step back and redo my resume. I want to investigate
other ways of creating my resume to see if LaTex is still the best fit for me.
I'll start with creating a sketch of what I want my resume to look like and 
then iterate through different options. &lt;/p&gt;
&lt;p&gt;I work as a Research and Development engineer(mainly with Computer Vision and Software).
I have a specific layout in mind that I'd like to use but I don't need an extremely flashy
resume like a creative might. Similarly, the main distribution for my resume will be print
instead of web, so I want to focus on tools that are for the print medium.  However, it will
likely be viewed on pdf viewers so I should still consider how it presents on a screen.
I would like to include some color, but technical resumes are often printed in black and white 
so I want to make sure my resume still looks good in black and white.&lt;/p&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Investigate different formats for a resume and determine which is best 
for my purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="3/31/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;3/31/2020 - Resume Sketch&lt;/h1&gt;
&lt;p&gt;I've found that my artistic process works best when starting with some sort of sketch. 
I used to do this with pencil and paper; but after getting more familiar with inkscape,
I've begun to prefer it. Being able to move things around makes visualization and planning 
much easier; instead of constantly redrawing and erasing. I don't have a drawing tablet(and 
find it hard to justify for planning sketches) but the mouse is adequate for this. I use LibreOffice
Draw for technical and engineering diagrams but when playing with layout I prefer Inkscape.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/sketch.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Layout Sketch&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;My old resume used a two column format and I started with a mock of that. I like the two column layout
because I feel it seperates information and makes it easier to read in one glance. In my (albiet limited)
experience reading resumes; employers in these fields usually use resumes as a quick heuristic to determine
whether a candidate is worth speaking to. That initial phone screen then determines whether an interview occurs.
Walls of text can be intimidating, especially if they're going through dozens of resumes. My guideline is 
if it takes longer than fives seconds to parse; it will probably be ignored. Two columns forces me to keep
my text more concise and creates a simple progression for the reader to follow.&lt;/p&gt;
&lt;p&gt;One change I wanted to make is emphasizing work experience. The old format kept both columns the same
width. This made sense right after college; as my personal projects felt very important.
But now, my work experience is where I want emphasis, so that column will be larger. &lt;/p&gt;
&lt;p&gt;Something else I added was meters for my skills. The old version
only had the rating(Excellent, Good, Competent), but I like the visual touch a meter adds. &lt;/p&gt;
&lt;p&gt;&lt;a name="4/1/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/1/2020 - Google Docs&lt;/h1&gt;
&lt;p&gt;I don't think Google Docs(or any word processor) will work for me, but it's something 
that I should try. They probably don't have a template that matches 
my design and I've found that word processors are difficult to use for resumes unless 
their templates match exactly what you want.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/doc.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Google Docs Draft&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This proved to be accurate. The Google Docs Serif template was closer to what I 
wanted than I expected; but as I tried to make adjustments I found myself struggling
with the limitations of Google Docs. But the template is visually appealing.
It is unlikely that a resume designed by me will look quite as good, but
that's a trade off I'll have to make to get my desired layout.&lt;/p&gt;
&lt;h2&gt;What I liked:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Template looks great(at least better than what I could do)&lt;/li&gt;
&lt;li&gt;Templates provided me with a lot of options and ideas&lt;/li&gt;
&lt;li&gt;Very fast and easy to get a working resume&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Disliked&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Getting the specific layout I wanted seemed like an unecessary amount of work&lt;/li&gt;
&lt;li&gt;From experience, I know that editing the resume over time is going to be difficult&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google Docs would've been perfect if I was okay with 
selecting a template from their selection and using that. I would've gotten a professional
looking resume with minimal effort. Because of my layout needs I should look at other options. 
The next method I will try is Scribus.&lt;/p&gt;
&lt;p&gt;&lt;a name="Word Processor Update"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Word Processor Update  - 4/15&lt;/h3&gt;
&lt;p&gt;After reading Byfield's blog post on LibreOffice's effectiveness in desktop publishing I wanted 
to look at Google Docs to see if they have similar features I didn't know about it. 
You can't insert text boxes, but you can insert drawings and put text in them. This feels like a hack instead
of a genuine solution. After some googling and experimenting I couldn't find any good layout or alignment tools. 
There are add-ons that seem to add these features, but I don't think forcing Google Docs to do what I need is 
the best option.&lt;/p&gt;
&lt;p&gt;&lt;a name="4/8/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/8/2020 - Scribus Tutorials&lt;/h1&gt;
&lt;p&gt;I've never used Scribus before so my first step will be to investigate how I might use it to
build a resume.&lt;/p&gt;
&lt;p&gt;It was during this research that I discovered that LibreOffice might actually be a good fit.
I don't want to start a tanget here, but after trying out Scribus I will look at LibreOffice.&lt;/p&gt;
&lt;p&gt;I found some video tutorials for scribus &lt;a href="https://www.youtube.com/playlist?list=PLqazFFzUAPc6U1RcNRBMeCK6Hg3g_S6aN"&gt;here&lt;/a&gt;. 
I prefer video tutorials for GUI applications because I find them to be clearer than documentation or blogs. 
In addition to showing you the tool, they also show you different use cases which is always helpful. And even
when they're out of date; they often give you enough info so that you can usually figure out the updated variant from Google
or the docs. However, these tutorials are from mid 2018, which is only two years ago, as of this writing. I didn't
watch every video; only the ones I needed, but the videos were excellent. It looks like in Scribus my approach
should be to create a bunch of text frames and arrange them in the way I want.&lt;/p&gt;
&lt;p&gt;&lt;a name="4/9/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/9/2020 - Zack Grossbart's Blog&lt;/h1&gt;
&lt;p&gt;The next area I want to investigate is to find if anybody also tried building their resume in Scribus and how 
that went for them. Surprisingly I found a blog post that does exactly that &lt;a href="http://www.zackgrossbart.com/hackito/resume/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first I thought this post was just building a resume in Scribus, but it's actually very similar to what I'm
trying to do. The author, Zack Grossbart, went through a similar desire to redo his resume after realizing
some weaknesses and went through a similar process. He discusses design decisions, assembles a layout, and then
tries out different applications. He tries OpenOffice(LibreOffice's predecssor) and then Scribus. He makes a 
resume in Scribus, but then tries InDesign and likes it a lot more. This surprised me; I know for design professionals
that InDesign is considered superior to the open source alernatives, but I expected
it to be sufficient for the rest of us. Grossbart has a similar engineering background(and open source preference)
like me, but he still felt InDesign was worth the cost.&lt;/p&gt;
&lt;p&gt;This is a very strong recomendation, but I think I will use Scribus for this experiment. I dual boot Windows, 
but only use it for gaming and use my Linux partition for everything else. If Scribus is the best tool, 
I will use the Creative Cloud trial and then decide if InDesign is worth it for me.&lt;/p&gt;
&lt;p&gt;Another aspect of design Grossbart emphasizes is typography; which Wikipedia defines as "the art and technique 
of arranging type to make written language legible, readable, and appealing", at the time of this writing. This 
is a not an area I had considered before, but it makes sense to do so. &lt;/p&gt;
&lt;p&gt;One detail I note is the post is somewhat old (2007, so 13 years old at the time of this writing). In 2007
Scribus was only 4 years old and LibreOffice was still OpenOffice. It is likely Scribus has made improvements 
since then and I know LibreOffice has. It also seems that I'm not quite as 
experienced as a designer as Grossbart. Those two details may make Scribus and/or LibreOffice better fits for me;
when compared to InDesign.&lt;/p&gt;
&lt;p&gt;Grossbart's blog also helped me realize two tangential details. First, the font of my own blog could be 
improved. Second, his blog is also somewhat of a project blog, just like what I intend for mine. So at some 
point &lt;a name="GrossbartAdvice"&gt;&lt;/a&gt;I should revaluate the typography/font of my own blog. 
And I should revisit his blog as I develop mine.&lt;/p&gt;
&lt;p&gt;&lt;a name="4/10/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/10/2020 - InDesign Blogs&lt;/h1&gt;
&lt;p&gt;I wanted to find more examples of blogs that describe a design process for resumes. Especially after 
Grossbart's reccomendation, I was interested to see this approach with InDesign. But I couldn't really find any...
Most blogs for InDesign were step by step tutorials showing how to build a resume in InDesign instead of a design
analysis. There were a few articles that listed off some good design principles when building a resume, but 
nothing like Grossbart's blog. It's possible that I may just have to look harder but I don't want to spend an
inordinate amount of time on this kind of preliminary research. If I find something later; I'll use it, but for
now I'm going to move on.&lt;/p&gt;
&lt;p&gt;&lt;a name="4/14/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/14/2020 - Scribus&lt;/h1&gt;
&lt;p&gt;I started by importing my svg sketch into Scribus and pushed it into the background layer with some transparency.
I find doing this with sketches makes them helpful references. &lt;/p&gt;
&lt;p&gt;Initially, I was struggling with Scribus. I tried creating text frames but I found myself struggling to format 
my text correctly. None of the options I was 
familiar with from word processors were there. I guessed I was using Scribus incorrectly and downloaded a 
template to see what they were doing. It seems that most text formatting in Scribus is handled through something
called a "style". You're supposed to pre-design your styles and apply them to the relevant areas of text. This is
apparently a common theme in Desktop Publishing. I noted how similar this was to CSS before realizing CSS 
stands for "Cascading Style Sheets" and this is likely 
where this concept came from. I hadn't watched the Styles tutorial in the video tutorials because
I didn't know what styles were or that I needed them, but now was the time to fix that. &lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/scribus.png" width="100%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Scribus Draft&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After learning how to use styles I very quickly came up with a simple, unpolished draft. This isn't a 
working version but it's a start that let me try out how Scribus might work. I expect to finish I would
need to finish planning out the styles and fill out the resume. However, at this point I want to make a similar
attempt in different applications. Once I decide which one is best, I will complete that version.&lt;/p&gt;
&lt;h2&gt;What I liked:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SVG support and layering are great&lt;/li&gt;
&lt;li&gt;Movable text boxes and alignment tools making it easy to generate desired layout&lt;/li&gt;
&lt;li&gt;Styles mean I don't have to redo work when making changes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Disliked&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Not sure ....&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's hard to say there was anything I disliked about Scribus. There was a learning curve, but that's always the
case with new software. But I'd like to try LibreOffice before making a decision, maybe I'll learn something there.&lt;/p&gt;
&lt;p&gt;&lt;a name-"4/15/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/15/2020 - Bruce Byfield's Work&lt;/h1&gt;
&lt;p&gt;Initially, I didn't want to try word processors for building a resume. I tried out Google Docs
and it didn't really work out. However, I found this &lt;a href="https://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/Why-LibreOffice-Writer-is-a-Desktop-Publisher-Not-a-Word-Processor"&gt;article&lt;/a&gt;, 
that implies LibreOffice Writer is desktop publishing software. The, author, Bruce Byfield, also wrote 
a book titled &lt;u&gt;Designing With LibreOffice&lt;/u&gt;. He's interviewed about this book &lt;a href="http://designingwithlibreoffice.com/interview/"&gt;here&lt;/a&gt;. 
This is his site for his book and has a link to buy or download it.  I decided this would be something to
investigate. I regularly use LibreOffice as my main word processor and if I can adapt it for my resume, it would be 
convenient. Byfield also seems to have familiarity with Scribus, so his opinion here is quite developed. &lt;/p&gt;
&lt;p&gt;This also motivated me to reinvestigate Google Docs. I've put my update as an addendum 
to my Google Docs entry &lt;a href="#Word Processor Update"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I first started by reading Byfield's interview. I noted that his background is in graphic design and technical
writing; so he is a professional in layout and publishing. He, like Grossbart, also mentioned 
the importance of typography when it comes to design. He discusses the importance of styles in LibreOffice and
says they're critical to using LibreOffice well. He compares styles to variables in coding, which 
is personally, a helpful analogy. All of this would've been nice to know when using styles in Scribus.&lt;/p&gt;
&lt;p&gt;Byfield even claims that LibreOffice Writer is better than Word as a Word Processor; and considers
it to be a mid-level Desktop Publishing Software. He references that the control isn't as fine as Scribus, but more
than powerful enough for a lot of use cases. He continues to assert that most people haven't realized that FOSS software isn't
playing catch up in this area. Considering his professional experience, this is a powerful statement. It strongly
implies that LibreOffice Writer is probably my application of choice. I'm looking forward to reading his book
and investigating this claim myself.&lt;/p&gt;
&lt;p&gt;&lt;a name-"4/16/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/16/2020 - Designing With LibreOffice&lt;/h1&gt;
&lt;p&gt;I was impressed with &lt;u&gt;Designing with LibreOffice&lt;/u&gt;; it's really more of a book on design than 
documentation on LibreOffice. There's even a section on slide design I should look at later. I didn't read the
book completely; I read some parts and skimmed others. I learned about styles and their use cases. It was here
that I realized that I handled Scribus incorrectly. I should have done manual formatting with text properties
and then developed the styles later. Developing them beforehand just wastes a lot of time changing unecessary
options. Byfield is a big fan of using styles and templates but recognizes when they are unecessary. Even with the
limited scope of my resume, I still think it's appropriate to use styles here. 
Styles may take time to step up, but they will make editing and maintaining my resume over time easier.&lt;/p&gt;
&lt;p&gt;So I should start with using manual formatting to create a LibreOffice sample like my Scibus sample. Then I can
decide which application to settle on and go through Byfield's full design process. &lt;/p&gt;
&lt;p&gt;&lt;a name="4/18/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/18/2020 - LibreOffice&lt;/h1&gt;
&lt;p&gt;Unfortunately, the first thing I noted when starting to use LibreOffice is the lack of support for layers. This
was a useful feature of Scribus that let me use my sketch as a transparent reference in the background layer.
While not necessary, it was a nice convenience. &lt;/p&gt;
&lt;p&gt;As I began to build out my layout I started encountering more complications.
I didn't plan on using styles for the first sample, but I wanted to make sure I knew how they worked.
But LibreOffice Writer didn't seem to have styles that I could apply to text frames. Every time I went into a
a text frame the styles wouldn't be a usable option. Searching through google, I found a mailing list &lt;a href="https://listarchives.libreoffice.org/global/users/msg42897.html"&gt;entry&lt;/a&gt;
that indicated this didn't work and to use Insert &amp;gt; Frame instead. This did work and allowed me to apply styles. The
default frame was unattractive but I could easily create an ideal frame style later. To apply styles I would
just identify my text and select the style I desired. I wondered what the point was of these two different objects.
Google showed me this &lt;a href="https://ask.libreoffice.org/en/question/77041/frames-vs-text-boxes/"&gt;question&lt;/a&gt;. It appears
that text frames are much simpler structures with some niche use cases. The question notes you can copy text
frames in Draw or Impress but can't with frames. &lt;/p&gt;
&lt;p&gt;Applying styles in frames worked but it doesn't show the styles in the navigator if they're in a frame. Again, this is 
a minor inconvenience, but I now appreciate the story editor in Scribus. Having all the text content laid out
and being able to apply styles via a side bar feels like a great UI choice. Especially when 
text spans multiple boxes. Writer's navigator can do this if I type like a word processor, but not with 
frames.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/writer.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;LibreOffice Writer Draft&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is my sample document in LibreOffice. When desiging the layout, I found the 
alignment tool in LibreOffice isn't quite as good as in Scribus. I can set anchors to certain objects(like frames),
but not other objects I've drawn. I also can't select both my drawing and frame and align that way(this is how Draw
does it). I can come up with work arounds for my sample but it's something else to note.&lt;/p&gt;
&lt;h2&gt;What I liked:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lots of premade styles that can be easily edited&lt;/li&gt;
&lt;li&gt;Integration with LibreOffice Draw makes it easy to draw and add simple images&lt;/li&gt;
&lt;li&gt;Odf has some overlap with Microsoft Word and Google Docs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Disliked&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;No layers support&lt;/li&gt;
&lt;li&gt;Alignment tools don't work well with images&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LibreOffice's familiarity is attractive, but I struggle a lot when creating my desired layout. The 
question will likely be whether it's worth struggling with LibreOffice to use a familiar application.&lt;/p&gt;
&lt;p&gt;&lt;a name="4/19/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/19/2020 - Revisiting Latex&lt;/h1&gt;
&lt;p&gt;Ah yes, Latex, we meet again. When I started this project, I honestly expected to try out some GUI applications
and then find that Latex was still the best choice. My impression was that GUI applications were mainly for 
ease of use. However, my investigations with Scribus and LibreOffice have shown
that was just my ignorance. Desktop Publishing Software has plenty of features to allow for formatting and allow
me to focus on content; which is supposed to be the selling point of Latex. I still need to learn more about 
desktop publishing, but I know typesetting my desired layout in Latex will also take an&lt;br&gt;
indeterminate amount of time.
As I've been using a pre-made Latex template for my old resume, I already have an estimate of how difficult it 
will be to typeset, even though I've not made an entry in this blog.&lt;/p&gt;
&lt;p&gt;The biggest draw to Latex right now, is I can use vim to edit my Latex files. I still prefer to use vim for text
documents and I can't use it in LibreOffice or Scibus. But I don't think this minor idiosyncracy is enough to
justify using Latex. So I will throw out Latex as option.&lt;/p&gt;
&lt;p&gt;The other thing I've realized is that Scribus's story editor is similar to Latex; in which you focus
on content and annotate the content. It annoyed me at first, but approaching it from a Latex 
perspective helps me appreciate it more.&lt;/p&gt;
&lt;p&gt;&lt;a name="4/22/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/22/2020 - The Decision&lt;/h1&gt;
&lt;p&gt;At the beginning of this project, I started with a bias towards Latex. But after learning
about LibreOffice's DTP capabilities and how styles can help with formatting; I began to consider it 
the frontrunner application. Now, after 
trying it out; it doesn't quite have what I need. I had to resort to workarounds to get 
the layout I wanted and I almost considered dealing
with them to use LibreOffice. But LibreOffice doesn't handle drawings with layout well. I can
make some workarounds with frames but drawings don't align easily to each other. I want to keep my resume 
simple, but having small images and lines adds a nice visual flair. In the case of the meters for skills; they actually
aid in rapid understanding of my resume. I don't want to give these up so I won't be happy with LibreOffice.
I'll have to use Scibus; the unlikely dark horse in the competition&lt;/p&gt;
&lt;p&gt;It might seem unusual that I'm so fixated on LibreOffice or that Scribus is the "dark horse". In the "What I Liked"
it seems like Scribus is a clear winner. But there was a critical aspect of my selection process that it didn't 
make sense to discuss before. A resume is not a one time document. I will have to make edits and updates over time.
And I may want to change and alter the layout occasionally as well. I have no interest in further Desktop Publishing
right now so the only use case I have for Scribus is my resume. That means I wont really stay up to date
with the application. I'll likely have to have some sort of "Scribus Review" every time I want to 
make non trivial changes(layout and/or formatting) to my resume. Hopefully, this wont be too frequent, but 
it doesn't compare well to LibreOffice.&lt;/p&gt;
&lt;p&gt;I have been using Word Processors since a very early age and feel familiar with them. It'll take some time to 
adapt this workflow of using styles but it's not an extreme shift. LibreOffice Writer is going to be
an application I use regularly for most other documents. This would give me a familiarity with the tool which is
preferable if I'm using it to maintain my resume. I wouldn't really need any kind of review with LibreOffice. If 
anything my resume work would help my ability to use LibreOffice for other kinds of work. Because of this I was 
willing to put up with some workarounds to stick with a tool that I can develop skill with. But I should only 
compromise so much; if it's not the right tool, I should just use the right one.&lt;/p&gt;
&lt;p&gt;I mentioned earlier that if I chose Scribus; I would also consider InDesign. But when I went to investigate
the cost of InDesign, I found that its $240/year(April 2020). I mentioned I don't plan on doing more DTP so
this $240/yr is effectively a "resume upkeep" cost. This is far too much for me to consider. I note that when Grossbart
selected InDesign as his preferred application; it was still a purchase, not a subscription. Even if I do prefer InDesign
I can't justify this cost so I'm not even going to bother to try it.&lt;/p&gt;
&lt;p&gt;I think the design principles in Byfield's book will still be useful and I will try to follow it if I can. 
I think my workflow should be to fill out sample content and then pick some fonts initially. Then I'll manually format
to my liking before converting everthing into styles. Finally, I'll polish up the layout.&lt;/p&gt;
&lt;p&gt;&lt;a name="4/28/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;4/28/2020 - Finishing Sample Content&lt;/h1&gt;
&lt;p&gt;I want to start by filling out the fake content of my resume. The content is relevant to my layout so I can't
just use latin filler text. Seeing where details about different resume entries are and how they
present is critical. But I didn't want to fill everything out until I knew which 
application I was settling on. 
I also didn't want to use my actual information. I knew I would focus too much on the content
so I decide to use Batman. I can create fake, but purposeful entries based on my background knowledge of Batman.
This isn't going to be completely accurate but it should serve my purpose. Once the sample text is done, I can pick
out an initial set of fonts. Then I can finish manual formatting, layout, and styling. &lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/sample_content.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Resume populated with fake sample content&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is the initial draft of the sample. I doubt it's accurate or thorough but it should give me an initial start
for the relevant design aspects of my resume.&lt;/p&gt;
&lt;p&gt;&lt;a name="5/03/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/03/2020 - Picking Initial Fonts&lt;/h1&gt;
&lt;p&gt;Now that I've put in some sample content I'd like to pick some fonts to start with. 
I want to start with some direction for fonts before I continue the layout.&lt;/p&gt;
&lt;p&gt;Byfield has an entire chapter on font selection. I would suggest reading the entire
chapter as there is a lot of good information, but I'm only going to discuss aspects
directly relevant to me and this project. 
Byfield starts by describing font families
and font styles. There are several different font families, but I'm likely to only 
really consider Serif and Sans Serifs. &lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/font_families.png" width="60%" height="auto"&gt;
    &lt;figcaption&gt;Serif and Sans Serif examples&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The main difference between the two is Serif fonts have tails on the letters that's 
supposed to make theme easier to read. Byfield mentions a lot of heuristics with the two
families; such as Serifs being more common for body text in print. Sans Serifs are 
supposedly more "modern" and look better on screens. He also mentions that font
selecion is more of
an art instead of a science so I'll probably have just have to try a bunch of fonts 
and see what sticks. &lt;/p&gt;
&lt;p&gt;He also talks about fonts styles(bold, italic, etc.) but mentions these are very
unstandarized. It's probably not even worth for me to consider this detail analytically
and I should probably just eyeball different styles and see what looks nice.&lt;/p&gt;
&lt;p&gt;Another point Byfield makes is that the convention is to use two different fonts.
One for headings and one for body text; more tends to draw too much attention to document
design instead of content. I originally considered using a thid eye-catching font just for
my name and resume title. But I think the point is valid, so I will try to stick to two.&lt;/p&gt;
&lt;p&gt;There's a lot of information on selecting different fonts but at this point I want to
just start looking at fonts and see what I like. One aspect
Byfield mentions is to select fonts that are "similar" to each other. This is a difficult
thing to determine, but one method he suggests is to select fonts by the same designer.
After searching for free fonts on google, I found a group of fonts all by the same
designer, Matt Ellis, that I like. The fonts are made freely available so I shouldn't
run into any legal issues. &lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/font_options.png" width="80%" height="auto"&gt;
&lt;/figure&gt;

&lt;p&gt;Arciform Sans is the clear standout for me and after trying it out I easily selected it
for the resume content.
Alcubierre is very popular and suggested for titles but the font feels a little too thin.
None of these fonts have bold or italic styles so I can't use those options. 
Athene feels a little wispy on my screen; so I don't think I'll use that either. Arctic
is a nice font but I really don't like the v letter. V isn't an extremely common letter,
though, so I'll keep Arctic in mind as a backup.&lt;/p&gt;
&lt;p&gt;Ikaros looked very promising but the tail on the capital P feels too short.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/capital_p.png" width="40%" height="auto"&gt;
    &lt;figcaption&gt;Capital P in Ikaros&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I do intend of using "P" in the "Personal Project" heading so, unlike the v in Arctic, the
capital P is important. 
I can't believe I'm being so picky over such pedantic details, but I guess that's design.&lt;/p&gt;
&lt;p&gt;While considering other fonts; I happened to look at my blog more closely. At this point,
I've taken Grossbart's &lt;a href="#GrossbartAdvice"&gt;advice&lt;/a&gt; and updated my blog's font. The font 
is, at the time of writing, Ubuntu. This is a free font that has a similar "curvature"
to Ellis's fonts. It also has more styles available, which is nice to have for headings.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/ubuntu_sample.png" width="80%" height="auto"&gt;
&lt;/figure&gt;

&lt;p&gt;I tried this out and find that I like it. For the moment, I'm italicizing the headings
but I may change that later.&lt;/p&gt;
&lt;p&gt;The final point of discussion is what Byfield refers to as the "color" of the page. This 
does not correspond to a physical color, but how light or dark the font appears. This
seems to be primarily based on font size and line spacing. This is useful, however, because
once line spacing is determined, it can be used as a "magic number" to guide other aspects
of the doucment. Byfield mentions this process can take a lot of experimentation but
has some guidelines listed.&lt;/p&gt;
&lt;p&gt;After experimenting I decided to use a 14pt font for the content, 16 pt for the headings,
28 pt for the title, and 22 pt for the subtitle. Arciforms Sans is a bit of a smaller font
so the increased size makes sense. I'm using 15 pt line spacing for the content. This is 
all subject to change but should give me a nice starting point.&lt;/p&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/scribus_fonts.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Current Resume sample with fonts&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Something I think is really important to mention is how incredibly useful styles were
for this entire process. Despite still being in the "design" phase, I set the default 
character style to the body font and made a second one for the heading I applied to the 
headings and title. This allowed me to quickly experiment with different fonts/sizes and see
how they'd look. I used Scribus's preview mode to view the rendered document and the styles
window to change them. It was much faster than highlighting and
changing large blocks of text and the workflow felt great.&lt;/p&gt;
&lt;p&gt;&lt;a name="5/24/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/24/2020 - Finishing Initial Styling&lt;/h1&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/initial_styling.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Current Resume sample initial styles set up&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is my resume with the styles developed and associated to different text groups.
My main goal here was to show clear seperation and hierarchy between different parts 
of my resume with indents, size, and style.&lt;/p&gt;
&lt;p&gt;I also made some changes with the ordering and word choice. I moved the company
name and location to the same line and put job title afterwards; as I think the company 
and location are more closely tied to each other. I also added the city to my contact 
info section. I never liked the idea of an address on my resume, but I think adding
an approximate location is a good idea. Finally, I changed the last skill entry to basic
instead of competent. Basic conveys the idea that I know something about these skills/areas
but don't have a very deep background; which is my intention.&lt;/p&gt;
&lt;p&gt;One aspect I struggled with was how to emphasize the resume title. I didn't like the look 
of just making it larger. But with Scribus's fine control I could actually stretch 
the text horizontally and I liked this distinct emphasis.&lt;/p&gt;
&lt;p&gt;Styles were incredibly useful here, they really helped me save time and improved my design
process. Why did this happen this time? When I tried using styles in my first attempt
they showed potential but were a lot of work. But that didn't happen this time, even though
I'm still in the design phase. The main reason was that I followed Byfield's typographic
principles. Recognizing that I would only need two fonts(one for body and one for heading);
I set the default character style to my body font and created a second style for the heading
which I applied to the relevant areas. This was a trivial amount of work but allowed
me to leverage styles in my initial font selection process. As I continued to work,
I simply branched out and kept inheriting and modifying my styles as needed. Again, this
was very little work, but allowed me to continue using styles and changing them as needed.
This typographic, styles first approach let me make full use of styles in my design process
without introducing unecessary amounts of work.&lt;/p&gt;
&lt;p&gt;This was definitely a different design process, but learning it will be extremely useful
in future; even when I'm working with documents and styles in LibreOffice. Byfield was
correct, once I changed how I thought about my process, I found styles to be incredibly
useful. However, I can also easily see why people may not like styles; especially if 
they don't follow this workflow. I can also see how styles are influenced by programmers.
Though I don't feel like many programmers use or even know about styles.&lt;/p&gt;
&lt;p&gt;&lt;a name="5/29/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/29/2020 - Finishing Layout&lt;/h1&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/layout.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Resume with Final Layout&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I used a grid along with the align and distribute tool to assemble the final layout.
I also made a few other changes. I changed "good" to "Strong" as a skill tier,
because I think good is very weak adjective. I also changed the section seperation to be
horizontal lines under the headings instead of a vertical line. This feels less crowded
and a lot more clear with the section emphasis.&lt;/p&gt;
&lt;p&gt;The final change I made is one that may not be noticeable. I wanted to change the color
of the headings to something more distinct, but this felt too bold for a technical resume. 
As a compromise, I used Navy. This is barely perceptible, but I think it does draw the
eyes to the headings even if it's not obvious as to why. It's subtle, but I think it works.
And if not, nobody will notice anyways; so it feels like a small risk. The resume still looks
excellent in black and white; as per my original design goal.&lt;/p&gt;
&lt;p&gt;The last step will be to add the meters for my skills and add icons for the contact info.
Then I'll be done!&lt;/p&gt;
&lt;p&gt;&lt;a name="5/30/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/30/2020 - Adding Icons&lt;/h1&gt;
&lt;figure class="center"&gt;
    &lt;img src="https://mitigatingfailure.com/icons.png" width="60%" height="auto" class="border"&gt;
    &lt;figcaption&gt;Resume with Final Layout&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For the last step I added icons to each entry of the contact info section using freely
available clip art. And I added the meters for the skills section. I made the borders
of the meters a little more rounded because that feels consistent with the rounding
in my fonts. Now my resume template is complete! All I need to do now is a final evaluation.&lt;/p&gt;
&lt;p&gt;&lt;a name="5/31/2020"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;5/31/2020 - Final Thoughts&lt;/h1&gt;
&lt;p&gt;This was a very long process but I'm satisfied with the result. I learned a lot, not 
just about Scribus and LibreOffice, but also typography and aspects of print design
in general. I'm certain this knowledge will be useful when I need to make documents 
in the future. I definitely feel that Scribus was the right tool for the job; I would've
struggled way too much on layout in LibreOffice. There was definitely a learning curve
but it was worth it.&lt;/p&gt;
&lt;p&gt;One final aspect I want to explain is why I don't have any entries about feedback. It's
reccomended that most resumes are reviewed by friends and colleagues. As I mentioned in
my goals; I wanted to create a template based on my design for my resume. Now that I have
the template; the more personal task of creating my own resume can begin. I will give
this to others to review but it will not be a public process. &lt;/p&gt;
&lt;p&gt;However, this blog does show how I implemented the design and what decisions I made. 
I hope these aspects will be useful to others who are designing their own resumes. The
personal details of my own resume are not relevant to that process. If I find out that
Scribus was actually the wrong tool(not sure how but it could happen); then I will make
an update with that information. But otherwise I am satisfied marking this project as 
completed and successful.&lt;/p&gt;</content><category term="Studio"></category><category term="resume"></category></entry></feed>